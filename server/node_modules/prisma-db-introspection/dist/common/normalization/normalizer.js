"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Normalizer = /** @class */ (function () {
    function Normalizer(baseModel) {
        this.baseModel = baseModel || null;
        this.baseType = null;
        this.baseFields = null;
        this.baseField = null;
    }
    Normalizer.prototype.normalize = function (model) {
        this.normalizeTypes(model.types, model);
    };
    Normalizer.prototype.normalizeTypes = function (types, model) {
        var e_1, _a;
        try {
            for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                var type = types_1_1.value;
                this.findAndSetBaseType(type);
                this.normalizeType(type, model);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    Normalizer.prototype.normalizeType = function (type, parentModel) {
        this.normalizeFields(type.fields, type, parentModel);
    };
    Normalizer.prototype.normalizeFields = function (fields, parentType, parentModel) {
        var e_2, _a;
        try {
            for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                this.findAndSetBaseField(field);
                this.normalizeField(field, parentType, parentModel);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    Normalizer.prototype.findAndSetBaseType = function (type) {
        if (this.baseModel === null) {
            this.baseType === null;
            this.baseFields = null;
        }
        else {
            this.baseType = this.findBaseByName(this.baseModel.types, type);
            if (this.baseType !== null) {
                this.baseFields = __spread(this.baseType.fields);
            }
        }
    };
    Normalizer.prototype.findAndSetBaseField = function (field) {
        var _this = this;
        if (this.baseFields === null) {
            this.baseField === null;
        }
        else {
            this.baseField = this.findBaseByName(this.baseFields, field);
            // Only use each base field once, otherwise
            // this code would not work with duplicate relations.
            this.baseFields = this.baseFields.filter(function (f) { return _this.baseField !== f; });
        }
    };
    Normalizer.prototype.findBaseByName = function (baseObjs, obj) {
        var _a = __read(baseObjs.filter(function (base) {
            // We always look up by database name, if possible.
            // Otherwise we might do a wrong lookup.
            if (base.databaseName && obj.databaseName) {
                return base.databaseName === obj.databaseName;
            }
            else if (base.databaseName) {
                return base.databaseName === obj.name;
            }
            else if (obj.databaseName) {
                return base.name === obj.databaseName;
            }
            else {
                return base.name === obj.name;
            }
        }), 1), baseCandidate = _a[0];
        return baseCandidate || null;
    };
    return Normalizer;
}());
exports.Normalizer = Normalizer;
//# sourceMappingURL=normalizer.js.map