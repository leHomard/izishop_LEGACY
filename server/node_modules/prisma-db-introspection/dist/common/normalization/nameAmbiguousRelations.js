"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var normalizer_1 = require("./normalizer");
var NameAmbiguousBackRelation = /** @class */ (function (_super) {
    __extends(NameAmbiguousBackRelation, _super);
    function NameAmbiguousBackRelation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NameAmbiguousBackRelation.prototype.normalizeField = function (field, parentType, parentModel) {
        var e_1, _a;
        if (
        // Make a check for all unnamed relations.
        typeof field.type !== 'string' &&
            field.relatedField !== null &&
            field.relationName === null) {
            try {
                for (var _b = __values(parentType.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var other = _c.value;
                    if (
                    // Any other relation makes our relation ambiguous
                    // regardless of the other relation is named or not.
                    field.type === other.type &&
                        field.relatedField !== other &&
                        field !== other) {
                        var relationName = "" + parentType.name + prisma_datamodel_1.capitalize(field.name) + "To" +
                            ("" + field.type.name + prisma_datamodel_1.capitalize(field.relatedField.name));
                        field.relationName = relationName;
                        field.relatedField.relationName = relationName;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    return NameAmbiguousBackRelation;
}(normalizer_1.Normalizer));
exports.NameAmbiguousBackRelation = NameAmbiguousBackRelation;
//# sourceMappingURL=nameAmbiguousRelations.js.map