import { ISDL, IGQLType, IGQLField } from 'prisma-datamodel';
export interface INormalizer {
    normalize(model: ISDL): any;
}
export declare abstract class Normalizer {
    protected baseModel: ISDL | null;
    protected baseType: IGQLType | null;
    protected baseFields: IGQLField[] | null;
    protected baseField: IGQLField | null;
    constructor(baseModel: ISDL | null);
    normalize(model: ISDL): void;
    protected normalizeTypes(types: IGQLType[], model: ISDL): void;
    protected normalizeType(type: IGQLType, parentModel: ISDL): void;
    protected normalizeFields(fields: IGQLField[], parentType: IGQLType, parentModel: ISDL): void;
    protected abstract normalizeField(field: IGQLField, parentType: IGQLType, parentModel: ISDL): any;
    protected findAndSetBaseType(type: IGQLType): void;
    protected findAndSetBaseField(field: IGQLField): void;
    private findBaseByName;
}
