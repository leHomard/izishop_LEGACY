"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var normalizer_1 = require("./normalizer");
var AdjustJoinTableCardinality = /** @class */ (function (_super) {
    __extends(AdjustJoinTableCardinality, _super);
    function AdjustJoinTableCardinality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdjustJoinTableCardinality.prototype.normalizeField = function (field, parentType, parentModel) {
        if (typeof field.type === 'string' ||
            !field.isList ||
            this.baseField === null ||
            typeof this.baseField.type === 'string' ||
            this.baseField.type.name !== field.type.name) {
            return;
        }
        // If the reference is not a list. We restrict it to a non-list and add
        // a link: TABLE directive (compatability mode).
        if (!this.baseField.isList) {
            field.isList = false;
            field.isRequired = this.baseField.isRequired;
            var alreadyHasLinkDirective = field.relatedField &&
                field.relatedField.directives.some(function (d) { return d.name === prisma_datamodel_1.DirectiveKeys.relation && Boolean(d.arguments.link); });
            if (alreadyHasLinkDirective) {
                return;
            }
            field.directives.push(this.createRelationTableDirective(field));
        }
    };
    AdjustJoinTableCardinality.prototype.createRelationTableDirective = function (field) {
        // TODO: Find a way to do this without any
        var directive = {
            name: prisma_datamodel_1.DirectiveKeys.relation,
            arguments: {
                link: 'TABLE',
            },
        };
        if (field.relationName) {
            directive.arguments.name = "\"" + field.relationName + "\"";
        }
        return directive;
    };
    return AdjustJoinTableCardinality;
}(normalizer_1.Normalizer));
exports.AdjustJoinTableCardinality = AdjustJoinTableCardinality;
//# sourceMappingURL=adjustJoinTableCardinality.js.map