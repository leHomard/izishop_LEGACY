"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var CopyEnums = /** @class */ (function () {
    function CopyEnums(baseModel) {
        this.baseModel = baseModel;
    }
    // Prisma does not store enums in the database,
    // so we copy all enums from the ref model, if no type with that name exists.
    CopyEnums.prototype.normalize = function (model) {
        var e_1, _a;
        var _loop_1 = function (refType) {
            if (refType.isEnum === true &&
                model.types.find(function (x) { return x.name === refType.name; }) === undefined) {
                model.types.push(prisma_datamodel_1.cloneType(refType));
            }
        };
        try {
            for (var _b = __values(this.baseModel.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                var refType = _c.value;
                _loop_1(refType);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return CopyEnums;
}());
exports.CopyEnums = CopyEnums;
//# sourceMappingURL=copyEnums.js.map