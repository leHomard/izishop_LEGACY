"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var normalizer_1 = require("./normalizer");
/**
 * We remove the relation name of type pairs which have exactly a single relation between them.
 * Except the relation name is explicitely declared in the base model. Then, we keep it.
 */
var RemoveRelationName = /** @class */ (function (_super) {
    __extends(RemoveRelationName, _super);
    function RemoveRelationName() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RemoveRelationName.prototype.normalizeField = function (field, parentType, parentModel) {
        if (typeof field.type !== 'string' && field.relationName !== null) {
            // Hola, relation!
            var otherRelationOfSameTypeCount = parentType.fields.filter(function (x) { return x.type === field.type && x !== field; }).length;
            var otherBackRelationCount = field.type.fields.filter(function (x) { return x.type == parentType && x !== field.relatedField; }).length;
            // We need a relation name directive in this case
            if (otherRelationOfSameTypeCount > 0 || otherBackRelationCount > 0)
                return;
            // Ref model has database name, don't remove
            if (this.baseField !== null && this.baseField.relationName !== null)
                return;
            // All checks passed, remove relation name
            if (field.relatedField !== null)
                field.relatedField.relationName = null;
            field.relationName = null;
        }
    };
    return RemoveRelationName;
}(normalizer_1.Normalizer));
exports.RemoveRelationName = RemoveRelationName;
//# sourceMappingURL=removeRelationNames.js.map