"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Enum specifying the sampling strategy.
 */
var SamplingStrategy;
(function (SamplingStrategy) {
    SamplingStrategy["One"] = "One";
    SamplingStrategy["All"] = "All";
    SamplingStrategy["Random"] = "Random";
})(SamplingStrategy = exports.SamplingStrategy || (exports.SamplingStrategy = {}));
/**
 * Reserved internal type for embedded objects,
 * used as a placeholder until SDL is constructed.
 */
exports.ObjectTypeIdentifier = 'EmbeddedObject';
exports.UnsupportedTypeErrorKey = 'UnsupportedType';
exports.UnsupportedArrayTypeErrorKey = 'UnsupportedArrayType';
/**
 * Error which should be thrown by the type inferrer
 * when it encounters an unsupported type, for example
 * a binary blob.
 */
var UnsupportedTypeError = /** @class */ (function (_super) {
    __extends(UnsupportedTypeError, _super);
    function UnsupportedTypeError(message, invalidType) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = exports.UnsupportedTypeErrorKey;
        _this.invalidType = invalidType;
        return _this;
    }
    return UnsupportedTypeError;
}(Error));
exports.UnsupportedTypeError = UnsupportedTypeError;
/**
 * Error which should be thrown by the type inferrer
 * when it encounters an unsupported array type, for example
 * a nested array.
 */
var UnsupportedArrayTypeError = /** @class */ (function (_super) {
    __extends(UnsupportedArrayTypeError, _super);
    function UnsupportedArrayTypeError(message, invalidType) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = exports.UnsupportedArrayTypeErrorKey;
        _this.invalidType = invalidType;
        return _this;
    }
    return UnsupportedArrayTypeError;
}(Error));
exports.UnsupportedArrayTypeError = UnsupportedArrayTypeError;
//# sourceMappingURL=documentConnector.js.map