import { IDataIterator, TypeInfo } from '../documentConnector';
import { DocumentConnector } from '../documentConnectorBase';
import { DatabaseType } from 'prisma-datamodel';
import { MongoClient, Collection, Cursor, AggregationCursor } from 'mongodb';
import { Data } from '../data';
import { DatabaseMetadata } from '../../../common/introspectionResult';
declare class MongoCursorIterator implements IDataIterator {
    protected cursor: Cursor<Data> | AggregationCursor<Data>;
    constructor(cursor: Cursor<Data> | AggregationCursor<Data>);
    hasNext(): Promise<boolean>;
    next(): Promise<Data>;
    close(): Promise<void>;
}
export declare class MongoConnector extends DocumentConnector<Collection<Data>> {
    private client;
    constructor(client: MongoClient);
    getDatabaseType(): DatabaseType;
    listSchemas(): Promise<string[]>;
    getInternalCollections(schemaName: string): Promise<{
        name: string;
        collection: Collection<Data>;
    }[]>;
    getInternalCollection(schemaName: string, collectionName: string): Promise<Collection<Data>>;
    sampleOne(collection: Collection): Promise<MongoCursorIterator>;
    sampleMany(collection: Collection, limit: number): Promise<MongoCursorIterator>;
    sampleAll(collection: Collection): Promise<MongoCursorIterator>;
    exists(collection: Collection, id: any): Promise<boolean>;
    /**
     * Mongo special handling of ObjectID types.
     */
    inferType(value: any): TypeInfo;
    getMetadata(schemaName: string): Promise<DatabaseMetadata>;
}
export {};
