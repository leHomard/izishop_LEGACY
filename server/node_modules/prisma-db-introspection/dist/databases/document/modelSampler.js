"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var documentConnector_1 = require("./documentConnector");
var MongoIdName = '_id';
/**
 * Samples all collections in a database and infers all primitive fields and embedded types.
 * Does not infer relations. Fields which might have a relation get their `relationName` attribute
 * set to `ModelSampler.ErrorType` for later resolving.
 */
var ModelSampler = /** @class */ (function () {
    /**
     * @param samplingStrategy The sampling strategy to use.
     */
    function ModelSampler(samplingStrategy) {
        if (samplingStrategy === void 0) { samplingStrategy = documentConnector_1.SamplingStrategy.One; }
        this.samplingStrategy = samplingStrategy;
    }
    /**
     * Samples all Collections in the given schema.
     * @param connector The connector, delivering the data.
     * @param schemaName The name of the schema to resolve.
     * @param primitiveResolver The resolver used for resolving primitive types.
     */
    ModelSampler.prototype.sample = function (connector, schemaName, primitiveResolver) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, types, allCollections, allCollections_1, allCollections_1_1, _b, name_1, collection, merger, iterator, item, mergeResult, e_1_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        types = [];
                        return [4 /*yield*/, connector.getInternalCollections(schemaName)];
                    case 1:
                        allCollections = _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 12, 13, 14]);
                        allCollections_1 = __values(allCollections), allCollections_1_1 = allCollections_1.next();
                        _c.label = 3;
                    case 3:
                        if (!!allCollections_1_1.done) return [3 /*break*/, 11];
                        _b = allCollections_1_1.value, name_1 = _b.name, collection = _b.collection;
                        merger = new ModelMerger(name_1, false, primitiveResolver);
                        return [4 /*yield*/, connector.sample(collection, this.samplingStrategy)];
                    case 4:
                        iterator = _c.sent();
                        _c.label = 5;
                    case 5: return [4 /*yield*/, iterator.hasNext()];
                    case 6:
                        if (!_c.sent()) return [3 /*break*/, 8];
                        return [4 /*yield*/, iterator.next()];
                    case 7:
                        item = _c.sent();
                        merger.analyze(item);
                        return [3 /*break*/, 5];
                    case 8: return [4 /*yield*/, iterator.close()
                        // Construct the actual type.
                    ];
                    case 9:
                        _c.sent();
                        mergeResult = merger.getType();
                        types.push.apply(types, __spread([mergeResult.type], mergeResult.embedded));
                        _c.label = 10;
                    case 10:
                        allCollections_1_1 = allCollections_1.next();
                        return [3 /*break*/, 3];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (allCollections_1_1 && !allCollections_1_1.done && (_a = allCollections_1.return)) _a.call(allCollections_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 14: return [2 /*return*/, types];
                }
            });
        });
    };
    ModelSampler.ErrorType = '<Unknown>';
    return ModelSampler;
}());
exports.ModelSampler = ModelSampler;
/**
 * Infers structure of a datatype from a set of data samples.
 *
 * Follows a streaming pattern to reduce the memory footprint
 */
var ModelMerger = /** @class */ (function () {
    /**
     * @param name Name of the type
     * @param isEmbedded Indicates if the type is an embedded type
     * @param primitiveResolver Resolver or primitive types.
     */
    function ModelMerger(name, isEmbedded, primitiveResolver) {
        this.name = name;
        this.isEmbedded = isEmbedded;
        this.fields = {};
        this.embeddedTypes = {};
        this.primitiveResolver = primitiveResolver;
    }
    /**
     * Analyzes this data sample.
     */
    ModelMerger.prototype.analyze = function (data) {
        var e_2, _a;
        try {
            for (var _b = __values(Object.keys(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var fieldName = _c.value;
                this.analyzeField(fieldName, data[fieldName]);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * Gets the top level type only.
     */
    ModelMerger.prototype.getTopLevelType = function () {
        var _this = this;
        var fields = Object.keys(this.fields).map(function (key) {
            return _this.toIGQLField(_this.fields[key]);
        });
        return {
            fields: fields,
            isEmbedded: this.isEmbedded,
            isRelationTable: false,
            name: this.name,
            isEnum: false,
            comments: [],
            directives: [],
            databaseName: null,
            indices: [],
        };
    };
    /**
     * Gets the type with embedded types attached recursivley.
     */
    ModelMerger.prototype.getType = function () {
        var e_3, _a, e_4, _b;
        var type = this.getTopLevelType();
        var allEmbedded = [];
        try {
            // Recurse over all embedded types.
            for (var _c = __values(Object.keys(this.embeddedTypes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var embeddedFieldName = _d.value;
                var embedded = this.embeddedTypes[embeddedFieldName].getType();
                allEmbedded.push.apply(allEmbedded, __spread([embedded.type], embedded.embedded));
                try {
                    for (var _e = __values(type.fields), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var field = _f.value;
                        if (field.name === embeddedFieldName) {
                            field.type = embedded.type;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return { type: type, embedded: allEmbedded };
    };
    /**
     * Takes a list of type candidates and merges them into one single type.
     *
     * TODO: If we get more types to summarize, we should have all summarization code (e.g. for arrays)
     * in one place.
     */
    ModelMerger.prototype.summarizeTypeList = function (typeCandidates) {
        // Our float/int decision is based soley on the data itself.
        // If we have at least one float, integer is always a misguess.
        if (typeCandidates.indexOf(prisma_datamodel_1.TypeIdentifiers.float) >= 0) {
            typeCandidates = typeCandidates.filter(function (x) { return x !== prisma_datamodel_1.TypeIdentifiers.integer; });
        }
        return typeCandidates;
    };
    /**
     * Merges all collected info into a field, including type info, relation info
     * and array properties.
     *
     * Creates error comments on inconsistency.
     */
    ModelMerger.prototype.toIGQLField = function (info) {
        var type = ModelSampler.ErrorType;
        var isArray = false;
        var isRequired = false;
        var comments = [];
        // Check for inconsistent array usage
        if (info.isArray.length > 1) {
            comments.push({
                isError: true,
                text: 'Datatype inconsistency: Sometimes is array, and sometimes not.',
            });
        }
        else if (info.isArray.length === 1) {
            isArray = info.isArray[0];
        }
        // Check for inconsistent data type
        var typeCandidates = this.summarizeTypeList(__spread(info.types));
        var invalidTypes = info.invalidTypes;
        if (typeCandidates.length > 1) {
            comments.push({
                isError: true,
                text: 'Datatype inconsistency. Conflicting types found: ' +
                    typeCandidates.join(', '),
            });
        }
        // Check for missing data type
        // If we have a type error, let the type be ModelSampler.ErrorType,
        // so we have a constant to check for.
        if (typeCandidates.length === 1) {
            type = typeCandidates[0];
        }
        else if (invalidTypes.length === 0) {
            // No type info at all.
            comments.push({
                isError: true,
                text: 'No type information found for field.',
            });
        }
        else if (invalidTypes.length === 1) {
            // No conflict, but an invalid type
            comments.push({
                isError: true,
                text: 'Field type not supported: ' + invalidTypes[0],
            });
        }
        else {
            comments.push({
                isError: true,
                text: 'Field type not found due to conflict. Candidates: ' +
                    __spread(typeCandidates).join(', '),
            });
        }
        // TODO: Abstract away
        var isId = info.name === MongoIdName;
        // TODO: This can be changed to allow other _id types.
        if (isId && type !== prisma_datamodel_1.TypeIdentifiers.id) {
            comments.push({
                isError: false,
                text: "Type " + type + " is currently not supported for id fields.",
            });
        }
        // https://www.prisma.io/docs/releases-and-maintenance/releases-and-beta-access/mongodb-preview-b6o5/#directives
        // TODO: we might want to include directives, as soon as we start changing field names. Otherwise, we can put that into a different module.
        return {
            name: info.name,
            type: type,
            isId: isId,
            idStrategy: null,
            associatedSequence: null,
            isList: isArray,
            isReadOnly: false,
            // ID fields are always required
            isRequired: isRequired || isId,
            // Never unique in Mongo.
            isUnique: false,
            // Reserved relation name for potential relations.
            relationName: info.isRelationCandidate && !isId ? ModelSampler.ErrorType : null,
            relatedField: null,
            defaultValue: null,
            comments: comments,
            databaseName: null,
            directives: [],
            isCreatedAt: false,
            isUpdatedAt: false,
        };
    };
    /**
     * Initialization helper for empty field info
     * structures
     * @param name
     */
    ModelMerger.prototype.initField = function (name) {
        this.fields[name] = this.fields[name] || {
            invalidTypes: [],
            isArray: [],
            name: name,
            types: [],
        };
    };
    /**
     * Analyzes a field with respect to it's value.
     */
    ModelMerger.prototype.analyzeField = function (name, value) {
        var e_5, _a;
        try {
            // Attempt field analysis
            var typeInfo = this.primitiveResolver.inferType(value);
            // Recursive embedding case.
            if (typeInfo.type === documentConnector_1.ObjectTypeIdentifier) {
                // Generate basic embedded model name, which has no purpose outside of the schema.
                this.embeddedTypes[name] =
                    this.embeddedTypes[name] ||
                        new ModelMerger(this.name + prisma_datamodel_1.capitalize(name), true, this.primitiveResolver);
                if (typeInfo.isArray) {
                    try {
                        // Embedded array.
                        for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                            var item = value_1_1.value;
                            this.embeddedTypes[name].analyze(item);
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                else {
                    this.embeddedTypes[name].analyze(value);
                }
            }
            this.initField(name);
            this.fields[name] = this.mergeField(this.fields[name], typeInfo);
        }
        catch (err) {
            // On error, register an invalid type.
            if (err.name === documentConnector_1.UnsupportedTypeErrorKey) {
                this.initField(name);
                this.fields[name].invalidTypes = this.merge(this.fields[name].invalidTypes, err.invalidType);
            }
            else if (err.name == documentConnector_1.UnsupportedArrayTypeErrorKey) {
                this.initField(name);
                this.fields[name] = this.mergeField(this.fields[name], {
                    isArray: true,
                    type: null,
                    isRelationCandidate: false,
                });
                this.fields[name].invalidTypes = this.merge(this.fields[name].invalidTypes, err.invalidType);
            }
            else {
                throw err;
            }
        }
    };
    /**
     * Merges two field infos.
     */
    ModelMerger.prototype.mergeField = function (field, info) {
        var types = field.types;
        if (info.type !== null) {
            types = this.merge(field.types, info.type);
        }
        return {
            invalidTypes: field.invalidTypes,
            isArray: this.merge(field.isArray, info.isArray),
            name: field.name,
            types: types,
            isRelationCandidate: field.isRelationCandidate || info.isRelationCandidate,
        };
    };
    ModelMerger.prototype.merge = function (target, value) {
        if (target.indexOf(value) < 0) {
            target.push(value);
        }
        return target;
    };
    return ModelMerger;
}());
exports.ModelMerger = ModelMerger;
//# sourceMappingURL=modelSampler.js.map