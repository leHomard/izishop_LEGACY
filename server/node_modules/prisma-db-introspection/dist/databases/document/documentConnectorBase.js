"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var documentIntrospectionResult_1 = require("./documentIntrospectionResult");
var modelSampler_1 = require("./modelSampler");
var relationResolver_1 = require("./relationResolver");
var documentConnector_1 = require("./documentConnector");
var debug = require("debug");
var log = debug('DocumentConnector');
/**
 * Sets how many items are queried when the `Random` sampling strategy is used.
 */
var randomSamplingLimit = 50;
/**
 * Sets the minimum hit/miss ratio needed to identify a pair of field, model as relation.
 */
var relationThreshold = 0.3;
/**
 * Base implementation of a DocumentConnector, holding all logic which should be equal for all
 * Document databases. For a documentation of abstract members, please see IDocumentConnector.
 */
var DocumentConnector = /** @class */ (function () {
    function DocumentConnector() {
    }
    /**
     * Calls `listModels` and wraps the result.
     */
    DocumentConnector.prototype.introspect = function (schema) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = documentIntrospectionResult_1.DocumentIntrospectionResult.bind;
                        return [4 /*yield*/, this.listModels(schema)];
                    case 1: return [2 /*return*/, new (_a.apply(documentIntrospectionResult_1.DocumentIntrospectionResult, [void 0, _b.sent(),
                            this.getDatabaseType()]))()];
                }
            });
        });
    };
    DocumentConnector.prototype.sample = function (collection, samplingStrategy) {
        switch (samplingStrategy) {
            case documentConnector_1.SamplingStrategy.One:
                return this.sampleOne(collection);
            case documentConnector_1.SamplingStrategy.All:
                return this.sampleAll(collection);
            case documentConnector_1.SamplingStrategy.Random:
                return this.sampleMany(collection, randomSamplingLimit);
        }
        throw new Error('Invalid sampling type specified: ' + samplingStrategy);
    };
    DocumentConnector.prototype.listModels = function (schemaName, modelSamplingStrategy, relationSamplingStrategy) {
        if (modelSamplingStrategy === void 0) { modelSamplingStrategy = documentConnector_1.SamplingStrategy.Random; }
        if (relationSamplingStrategy === void 0) { relationSamplingStrategy = documentConnector_1.SamplingStrategy.Random; }
        return __awaiter(this, void 0, void 0, function () {
            var sampler, resolver, types;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // First, we sample our collections to create a flat type schema.
                        // Then, we attempt to find relations using sampling and a ratio test.
                        log('Listing models.');
                        sampler = new modelSampler_1.ModelSampler(modelSamplingStrategy);
                        resolver = new relationResolver_1.RelationResolver(relationSamplingStrategy, relationThreshold);
                        return [4 /*yield*/, sampler.sample(this, schemaName, this)];
                    case 1:
                        types = _a.sent();
                        return [4 /*yield*/, resolver.resolve(types, this, schemaName)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, {
                                types: types,
                            }];
                }
            });
        });
    };
    /**
     * Infers the primitive type for an array. Uses inferType internally.
     */
    DocumentConnector.prototype.inferArrayType = function (array) {
        var e_1, _a;
        var type = null;
        try {
            for (var array_1 = __values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
                var item = array_1_1.value;
                var itemType = this.inferType(item);
                if (itemType.isArray) {
                    throw new documentConnector_1.UnsupportedArrayTypeError('Received a nested array while analyzing data. This is not supported yet.', 'ArrayArray');
                }
                if (type === null) {
                    type = itemType;
                }
                else if ((type.type === prisma_datamodel_1.TypeIdentifiers.integer &&
                    itemType.type === prisma_datamodel_1.TypeIdentifiers.float) ||
                    (type.type === prisma_datamodel_1.TypeIdentifiers.float &&
                        itemType.type === prisma_datamodel_1.TypeIdentifiers.integer)) {
                    // Special case: We treat int as a case of float, if needed.
                    type.type = prisma_datamodel_1.TypeIdentifiers.float;
                }
                else if (type.type !== itemType.type) {
                    throw new documentConnector_1.UnsupportedArrayTypeError('Mixed arrays are not supported.', "[" + type.type + " | " + itemType.type + "]");
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (array_1_1 && !array_1_1.done && (_a = array_1.return)) _a.call(array_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return type;
    };
    /**
     * Infers the type of a primitive value.
     *
     * This method should be overridden accordingly for each Connector implementation.
     */
    DocumentConnector.prototype.inferType = function (value) {
        // Maybe an array, which would otherwise be identified as object.
        if (Array.isArray(value)) {
            // We resolve this case recursively.
            var type = this.inferArrayType(value);
            if (type !== null) {
                return {
                    type: type.type,
                    isArray: true,
                    isRelationCandidate: type.isRelationCandidate,
                };
            }
            else {
                return { type: null, isArray: true, isRelationCandidate: false };
            }
        }
        // Base types
        switch (typeof value) {
            case 'number':
                return {
                    type: value % 1 === 0 ? prisma_datamodel_1.TypeIdentifiers.integer : prisma_datamodel_1.TypeIdentifiers.float,
                    isArray: false,
                    isRelationCandidate: false,
                };
            case 'boolean':
                return {
                    type: prisma_datamodel_1.TypeIdentifiers.boolean,
                    isArray: false,
                    isRelationCandidate: false,
                };
            // Base case: String types might identify relations.
            case 'string':
                return {
                    type: prisma_datamodel_1.TypeIdentifiers.string,
                    isArray: false,
                    isRelationCandidate: true,
                };
            case 'object':
                if (value instanceof Date) {
                    return {
                        type: prisma_datamodel_1.TypeIdentifiers.dateTime,
                        isArray: false,
                        isRelationCandidate: false,
                    };
                }
                else if (value === null) {
                    throw new documentConnector_1.UnsupportedTypeError('Received an unsupported type: ', 'null');
                }
                else {
                    return {
                        type: documentConnector_1.ObjectTypeIdentifier,
                        isArray: false,
                        isRelationCandidate: false,
                    };
                }
            default:
                break;
        }
        throw new documentConnector_1.UnsupportedTypeError('Received an unsupported type:', typeof value);
    };
    return DocumentConnector;
}());
exports.DocumentConnector = DocumentConnector;
//# sourceMappingURL=documentConnectorBase.js.map