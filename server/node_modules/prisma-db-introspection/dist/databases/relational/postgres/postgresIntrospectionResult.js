"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var relationalIntrospectionResult_1 = require("../relationalIntrospectionResult");
var prisma_datamodel_1 = require("prisma-datamodel");
var PostgresIntrospectionResult = /** @class */ (function (_super) {
    __extends(PostgresIntrospectionResult, _super);
    function PostgresIntrospectionResult(model, relations, enums, sequences, renderer) {
        return _super.call(this, model, relations, enums, sequences, prisma_datamodel_1.DatabaseType.postgres, renderer) || this;
    }
    PostgresIntrospectionResult.prototype.isTypeReserved = function (type) {
        return type.name === '_RelayId' || type.name === '_Migration';
    };
    PostgresIntrospectionResult.prototype.toTypeIdentifyer = function (fieldTypeName, fieldInfo, typeName) {
        switch (fieldTypeName) {
            case 'int1':
            case 'int2':
            case 'int4':
            case '_int4':
            case 'int8':
                return prisma_datamodel_1.TypeIdentifiers.integer;
            case 'numeric':
            case 'float4':
            case 'float8':
                return prisma_datamodel_1.TypeIdentifiers.float;
            case 'varchar':
            case 'bpchar':
            case '_text':
            // If we have a text type on an ID field, we map to the ID type.
            case 'text':
                return fieldInfo.isId ? prisma_datamodel_1.TypeIdentifiers.id : prisma_datamodel_1.TypeIdentifiers.string;
            case 'bool':
                return prisma_datamodel_1.TypeIdentifiers.boolean;
            case 'jsonb':
            case 'json':
                return prisma_datamodel_1.TypeIdentifiers.json;
            case '_date':
            case 'date':
            case 'timestamptz':
            case 'timestamp':
                return prisma_datamodel_1.TypeIdentifiers.dateTime;
            case 'uuid':
                return prisma_datamodel_1.TypeIdentifiers.uuid;
            default:
                return null;
        }
    };
    PostgresIntrospectionResult.prototype.parseDefaultValue = function (defaultValueString, type) {
        var val = defaultValueString;
        // Remove cast operator
        var i = val.indexOf('::');
        if (i >= 0) {
            val = val.substring(0, i);
        }
        // Detect string
        if (val.startsWith("'")) {
            // Strip quotes (are added again by renderer)
            val = val.substring(1, val.length - 1);
        }
        // Check for null
        if (val.toUpperCase() === 'NULL') {
            return null;
        }
        // If the field is not a string field,
        // and the default val is not a boolean or a number, we assume a function call or sequence reference.
        if (type !== prisma_datamodel_1.TypeIdentifiers.string && type != prisma_datamodel_1.TypeIdentifiers.id) {
            if (isNaN(val) &&
                val.toLowerCase() !== 'true' &&
                val.toLowerCase() !== 'false') {
                return null;
            }
        }
        // TODO: Sequences are simply ignored.
        return val;
    };
    PostgresIntrospectionResult.prototype.resolveSequences = function (types, sequences) {
        var e_1, _a, e_2, _b;
        try {
            for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                var type = types_1_1.value;
                var _loop_1 = function (field) {
                    if (typeof field.defaultValue === 'string' &&
                        field.defaultValue.startsWith('nextval')) {
                        // Regex also truncates the database schema name, if included in the regex. that's the first capture group.
                        var match = field.defaultValue.match(/^nextval\('(?:.*\.)?(.*?)'::regclass\)$/i);
                        if (match === null) {
                            return "continue";
                        }
                        var _a = __read(match, 2), dummy = _a[0], seqName_1 = _a[1];
                        // Trim quotes.
                        if (seqName_1.startsWith('"')) {
                            seqName_1 = seqName_1.substring(1, seqName_1.length - 1);
                        }
                        var seq = sequences.find(function (x) { return x.name === seqName_1; });
                        if (seq === undefined) {
                            field.comments.push({
                                text: "Error resolving sequence " + seqName_1 + " for " + type.name + "." + field.name + ": The sequence was not found.",
                                isError: true,
                            });
                        }
                        else {
                            field.idStrategy = prisma_datamodel_1.IdStrategy.Sequence;
                            field.associatedSequence = seq;
                            field.defaultValue = null;
                        }
                    }
                };
                try {
                    for (var _c = __values(type.fields), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var field = _d.value;
                        _loop_1(field);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return types;
    };
    return PostgresIntrospectionResult;
}(relationalIntrospectionResult_1.RelationalIntrospectionResult));
exports.PostgresIntrospectionResult = PostgresIntrospectionResult;
//# sourceMappingURL=postgresIntrospectionResult.js.map