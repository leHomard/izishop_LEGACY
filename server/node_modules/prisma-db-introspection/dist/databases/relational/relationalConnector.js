"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var debug = require("debug");
var aggregate_1 = require("../../common/aggregate");
var log = debug('RelationalIntrospection');
var RelationalConnector = /** @class */ (function () {
    function RelationalConnector(client) {
        this.client = client;
    }
    RelationalConnector.prototype.query = function (query, params) {
        if (params === void 0) { params = []; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.query(query, params)];
                    case 1:
                        result = _a.sent();
                        if (result.rows) {
                            return [2 /*return*/, result.rows];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    RelationalConnector.prototype.introspect = function (schema) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, models, relations, enums, sequences;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.listModels(schema),
                            this.listRelations(schema),
                            this.listEnums(schema),
                            this.listSequences(schema),
                        ])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 4]), models = _a[0], relations = _a[1], enums = _a[2], sequences = _a[3];
                        return [2 /*return*/, this.createIntrospectionResult(models, relations, enums, sequences)];
                }
            });
        });
    };
    RelationalConnector.prototype.listEnums = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queryEnums(schemaName)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * All queries below use the standardized information_schema table.
     */
    RelationalConnector.prototype.listSchemas = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log('Querying schemas.');
                        return [4 /*yield*/, this.query("SELECT \n         schema_name\n       FROM \n         information_schema.schemata\n       WHERE schema_name NOT LIKE 'information_schema';")];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.map(function (x) { return x.schema_name; })];
                }
            });
        });
    };
    RelationalConnector.prototype.listModels = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, e_2, _b, e_3, _c, tables, _d, allTables, allComments, allColumns, allIndices, columnsByTable, indexByTable, commentsByColumnByTable, allComments_1, allComments_1_1, comment, commentsByColumn, allTables_1, allTables_1_1, tableName, columns, tableColumnComments, columns_1, columns_1_1, column, comment, indices, secondaryIndices, _e, primaryKey;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        log("Introspecting models in schema " + schemaName + ".");
                        tables = [];
                        return [4 /*yield*/, Promise.all([
                                this.queryTables(schemaName),
                                this.queryColumnComments(schemaName),
                                this.queryColumns(schemaName),
                                this.queryIndices(schemaName),
                            ])
                            // Aggregate for fast lookup
                        ];
                    case 1:
                        _d = __read.apply(void 0, [_f.sent()
                            // Aggregate for fast lookup
                            , 4]), allTables = _d[0], allComments = _d[1], allColumns = _d[2], allIndices = _d[3];
                        columnsByTable = aggregate_1.aggregateBy(allColumns, function (c) { return c.tableName; });
                        indexByTable = aggregate_1.aggregateBy(allIndices, function (c) { return c.tableName; });
                        commentsByColumnByTable = {};
                        try {
                            for (allComments_1 = __values(allComments), allComments_1_1 = allComments_1.next(); !allComments_1_1.done; allComments_1_1 = allComments_1.next()) {
                                comment = allComments_1_1.value;
                                commentsByColumn = commentsByColumnByTable[comment.tableName];
                                if (!commentsByColumn) {
                                    commentsByColumn = {};
                                    commentsByColumnByTable[comment.tableName] = commentsByColumn;
                                }
                                // There can be only one comment per column.
                                commentsByColumn[comment.columnName] = comment;
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (allComments_1_1 && !allComments_1_1.done && (_a = allComments_1.return)) _a.call(allComments_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        try {
                            // Actual aggregation
                            for (allTables_1 = __values(allTables), allTables_1_1 = allTables_1.next(); !allTables_1_1.done; allTables_1_1 = allTables_1.next()) {
                                tableName = allTables_1_1.value;
                                columns = columnsByTable[tableName];
                                tableColumnComments = commentsByColumnByTable[tableName];
                                if (tableColumnComments !== undefined) {
                                    try {
                                        for (columns_1 = __values(columns), columns_1_1 = columns_1.next(); !columns_1_1.done; columns_1_1 = columns_1.next()) {
                                            column = columns_1_1.value;
                                            comment = tableColumnComments[column.name];
                                            if (comment !== undefined) {
                                                column.comment = comment.text;
                                            }
                                        }
                                    }
                                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                    finally {
                                        try {
                                            if (columns_1_1 && !columns_1_1.done && (_c = columns_1.return)) _c.call(columns_1);
                                        }
                                        finally { if (e_3) throw e_3.error; }
                                    }
                                }
                                indices = (indexByTable[tableName] || []);
                                secondaryIndices = indices.filter(function (x) { return !x.isPrimaryKey; });
                                _e = __read(indices.filter(function (x) { return x.isPrimaryKey; }), 1), primaryKey = _e[0];
                                tables.push({
                                    name: tableName,
                                    columns: columns,
                                    indices: secondaryIndices,
                                    primaryKey: primaryKey || null,
                                });
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (allTables_1_1 && !allTables_1_1.done && (_b = allTables_1.return)) _b.call(allTables_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        return [2 /*return*/, tables];
                }
            });
        });
    };
    RelationalConnector.prototype.countTables = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var countTableQueries, _a, ct;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        log('Counting tables.');
                        countTableQueries = "\n      SELECT \n        count(*) as ct\n      FROM \n        information_schema.tables\n      WHERE \n        table_schema = " + this.parameter(1, 'text') + "\n        -- Views are not supported yet\n        AND table_type = 'BASE TABLE'";
                        return [4 /*yield*/, this.query(countTableQueries, [schemaName])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 1]), ct = _a[0].ct;
                        return [2 /*return*/, ct];
                }
            });
        });
    };
    RelationalConnector.prototype.queryTables = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var allTablesQuery;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log('Querying tables.');
                        allTablesQuery = "\n      SELECT \n        table_name as table_name\n      FROM \n        information_schema.tables\n      WHERE \n        table_schema = " + this.parameter(1, 'text') + "\n        -- Views are not supported yet\n        AND table_type = 'BASE TABLE'\n      ORDER BY table_name";
                        return [4 /*yield*/, this.query(allTablesQuery, [schemaName])];
                    case 1: return [2 /*return*/, (_a.sent()).map(function (row) {
                            prisma_datamodel_1.GQLAssert.raiseIf(row.table_name === undefined, 'Received `undefined` as table name.');
                            return row.table_name;
                        })];
                }
            });
        });
    };
    RelationalConnector.prototype.queryColumns = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var allColumnsQuery;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log("Querying columns for schema " + schemaName + ".");
                        allColumnsQuery = "\n      SELECT\n        ordinal_position as ordinal_postition,\n        column_name as column_name,\n        " + this.getTypeColumnName() + " as udt_name,\n        column_default as column_default,\n        is_nullable = 'YES' as is_nullable,\n        table_name as table_name, \n        " + this.getAutoIncrementCondition() + " as is_auto_increment\n      FROM\n        information_schema.columns\n      WHERE\n        table_schema = '" + schemaName + "'\n      ORDER BY column_name";
                        return [4 /*yield*/, this.query(allColumnsQuery)];
                    case 1: 
                    /**
                     * Note, that ordinal_position comes back as a string because it's a bigint!
                     */
                    return [2 /*return*/, (_a.sent()).map(function (row) {
                            prisma_datamodel_1.GQLAssert.raiseIf(row.column_name === undefined, 'Received `undefined` as column name.');
                            prisma_datamodel_1.GQLAssert.raiseIf(row.udt_name === undefined, 'Received `undefined` as data type.');
                            return {
                                name: row.column_name,
                                type: row.udt_name,
                                isList: false,
                                readOnly: false,
                                isUnique: false,
                                isAutoIncrement: row.is_auto_increment,
                                defaultValue: row.column_default,
                                isNullable: row.is_nullable,
                                comment: null,
                                tableName: row.table_name,
                            };
                        })];
                }
            });
        });
    };
    RelationalConnector.prototype.listRelations = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var fkQuery, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log("Querying relations in schema " + schemaName + ".");
                        fkQuery = "  \n      SELECT \n        keyColumn1.constraint_name AS \"fkConstraintName\",\n        keyColumn1.table_name AS \"fkTableName\", \n        keyColumn1.column_name AS \"fkColumnName\", \n        keyColumn2.constraint_name AS \"referencedConstraintName\",\n        keyColumn2.table_name AS \"referencedTableName\", \n        keyColumn2.column_name AS \"referencedColumnName\" \n      FROM \n        information_schema.referential_constraints refConstraints\n      INNER JOIN\n        information_schema.key_column_usage AS keyColumn1\n        ON keyColumn1.constraint_catalog = refConstraints.constraint_catalog\n        AND keyColumn1.constraint_schema = refConstraints.constraint_schema\n        AND keyColumn1.constraint_name = refConstraints.constraint_name\n      INNER JOIN\n        information_schema.key_column_usage AS keyColumn2\n        ON keyColumn2.constraint_catalog = refConstraints.unique_constraint_catalog\n        AND keyColumn2.constraint_schema = refConstraints.unique_constraint_schema\n        AND keyColumn2.constraint_name = refConstraints.unique_constraint_name\n        AND keyColumn2.ordinal_position = keyColumn1.ordinal_position\n      WHERE\n        refConstraints.constraint_schema = " + this.parameter(1, 'text');
                        return [4 /*yield*/, this.query(fkQuery, [schemaName])];
                    case 1:
                        result = (_a.sent()).map(function (row) {
                            return {
                                sourceColumn: row.fkColumnName,
                                sourceTable: row.fkTableName,
                                targetColumn: row.referencedColumnName,
                                targetTable: row.referencedTableName,
                            };
                        });
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return RelationalConnector;
}());
exports.RelationalConnector = RelationalConnector;
//# sourceMappingURL=relationalConnector.js.map