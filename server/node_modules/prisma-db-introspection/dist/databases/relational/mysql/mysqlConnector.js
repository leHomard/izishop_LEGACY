"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var relationalConnector_1 = require("../relationalConnector");
var prisma_datamodel_1 = require("prisma-datamodel");
var mysqlIntrospectionResult_1 = require("./mysqlIntrospectionResult");
var mysqlDatabaseClient_1 = require("./mysqlDatabaseClient");
// Documentation: https://www.prisma.io/docs/data-model-and-migrations/introspection-mapping-to-existing-db-soi1/
// Responsible for extracting a normalized representation of a PostgreSQL database (schema)
var MysqlConnector = /** @class */ (function (_super) {
    __extends(MysqlConnector, _super);
    function MysqlConnector(client) {
        var _this = this;
        if (client.state !== undefined) {
            client = new mysqlDatabaseClient_1.default(client);
        }
        _this = _super.call(this, client) || this;
        return _this;
    }
    MysqlConnector.prototype.getDatabaseType = function () {
        return prisma_datamodel_1.DatabaseType.postgres;
    };
    MysqlConnector.prototype.createIntrospectionResult = function (models, relations, enums, sequences) {
        return new mysqlIntrospectionResult_1.MysqlIntrospectionResult(models, relations, enums, sequences);
    };
    MysqlConnector.prototype.getTypeColumnName = function () {
        return 'COLUMN_TYPE';
    };
    MysqlConnector.prototype.getAutoIncrementCondition = function () {
        return 'EXTRA like \'%auto_increment%\'';
    };
    MysqlConnector.prototype.parameter = function (count, type) {
        return "?";
    };
    MysqlConnector.prototype.hasReferentialConstraintsTableName = function () {
        return true;
    };
    // TODO: Unit test for column comments
    MysqlConnector.prototype.queryColumnComments = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var commentQuery, comments;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        commentQuery = "\n      SELECT\n        column_comment,\n        column_name,\n        table_name\n      FROM\n        information_schema.columns\n      WHERE\n        table_schema = ?\n        AND column_comment != ''\n    ";
                        return [4 /*yield*/, this.query(commentQuery, [schemaName])];
                    case 1:
                        comments = (_a.sent()).map(function (row) { return ({
                            text: row.column_comment,
                            columnName: row.column_name,
                            tableName: row.table_name,
                        }); });
                        return [2 /*return*/, comments];
                }
            });
        });
    };
    MysqlConnector.prototype.queryIndices = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var indexQuery;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        indexQuery = "\n      SELECT \n        table_name, \n        index_name, \n        GROUP_CONCAT(DISTINCT column_name SEPARATOR ', ') AS column_names, \n        NOT non_unique AS is_unique, \n        index_name = 'PRIMARY' AS is_primary_key\n      FROM \n        information_schema.statistics\n      WHERE\n        table_schema = '" + schemaName + "'\n      GROUP BY\n        table_name, index_name, non_unique\n    ";
                        return [4 /*yield*/, this.query(indexQuery)];
                    case 1: return [2 /*return*/, (_a.sent()).map(function (row) {
                            return {
                                tableName: row.table_name,
                                name: row.index_name,
                                fields: _this.parseJoinedArray(row.column_names),
                                unique: row.is_unique,
                                isPrimaryKey: row.is_primary_key,
                            };
                        })];
                }
            });
        });
    };
    MysqlConnector.prototype.parseJoinedArray = function (arrayAsString) {
        if (arrayAsString === null || arrayAsString === undefined) {
            return [];
        }
        return arrayAsString.split(',').map(function (x) { return x.trim().replace(/'/g, ''); });
    };
    MysqlConnector.prototype.queryEnums = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var enumQuery;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        enumQuery = "\n      SELECT DISTINCT\n        column_type, table_name, column_name\n      FROM\n        information_schema.columns\n      WHERE \n        column_type like 'enum(%'\n        AND table_schema = ?";
                        return [4 /*yield*/, this.query(enumQuery, [schemaName])];
                    case 1: return [2 /*return*/, (_a.sent()).map(function (row) {
                            var enumValues = row.column_type;
                            // Strip 'enum(' from beginning and ')' from end.
                            var strippedEnumValues = enumValues.substring(5, enumValues.length - 1);
                            return {
                                // Enum types in mysql are anonymous. We generate some funny name for them.
                                name: (prisma_datamodel_1.capitalize(row.table_name) +
                                    prisma_datamodel_1.capitalize(row.column_name) +
                                    'Enum'),
                                values: _this.parseJoinedArray(strippedEnumValues),
                            };
                        })];
                }
            });
        });
    };
    /**
     * We have extra join conditions in mysql.
     * @param schemaName
     */
    MysqlConnector.prototype.listRelations = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var fkQuery, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fkQuery = "  \n      SELECT \n        keyColumn1.constraint_name AS \"fkConstraintName\",\n        keyColumn1.table_name AS \"fkTableName\", \n        keyColumn1.column_name AS \"fkColumnName\", \n        keyColumn2.constraint_name AS \"referencedConstraintName\",\n        keyColumn2.table_name AS \"referencedTableName\", \n        keyColumn2.column_name AS \"referencedColumnName\" \n      FROM \n        information_schema.referential_constraints refConstraints\n      INNER JOIN\n        information_schema.key_column_usage AS keyColumn1\n        ON keyColumn1.constraint_catalog = refConstraints.constraint_catalog\n        AND keyColumn1.constraint_schema = refConstraints.constraint_schema\n        AND keyColumn1.constraint_name = refConstraints.constraint_name\n        -- Extra join needed in mysql\n        AND keyColumn1.table_name = refConstraints.table_name\n      INNER JOIN\n        information_schema.key_column_usage AS keyColumn2\n        ON keyColumn2.constraint_catalog = refConstraints.unique_constraint_catalog\n        AND keyColumn2.constraint_schema = refConstraints.unique_constraint_schema\n        AND keyColumn2.constraint_name = refConstraints.unique_constraint_name\n        AND keyColumn2.ordinal_position = keyColumn1.ordinal_position\n        -- Extra join needed in mysql\n        AND keyColumn2.table_name = refConstraints.referenced_table_name\n      WHERE\n        refConstraints.constraint_schema = ?";
                        return [4 /*yield*/, this.query(fkQuery, [schemaName])];
                    case 1:
                        result = (_a.sent()).map(function (row) {
                            return {
                                sourceColumn: row.fkColumnName,
                                sourceTable: row.fkTableName,
                                targetColumn: row.referencedColumnName,
                                targetTable: row.referencedTableName,
                            };
                        });
                        return [2 /*return*/, result];
                }
            });
        });
    };
    MysqlConnector.prototype.listSequences = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, []];
            });
        });
    };
    MysqlConnector.prototype.getMetadata = function (schemaName) {
        return __awaiter(this, void 0, void 0, function () {
            var schemaSizeQuery, _a, size, count;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        schemaSizeQuery = "\n    SELECT \n      SUM(data_length + index_length) as size \n      FROM information_schema.TABLES \n      WHERE table_schema = ?";
                        return [4 /*yield*/, this.query(schemaSizeQuery, [schemaName])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 1]), size = _a[0].size;
                        return [4 /*yield*/, _super.prototype.countTables.call(this, schemaName)];
                    case 2:
                        count = _b.sent();
                        return [2 /*return*/, {
                                countOfTables: count,
                                sizeInBytes: size,
                            }];
                }
            });
        });
    };
    return MysqlConnector;
}(relationalConnector_1.RelationalConnector));
exports.MysqlConnector = MysqlConnector;
//# sourceMappingURL=mysqlConnector.js.map