import { RelationalConnector, ITable, ITableRelation, IInternalEnumInfo, IEnum, ISequenceInfo } from '../relationalConnector';
import { Connection } from 'mysql';
import { DatabaseType } from 'prisma-datamodel';
import { RelationalIntrospectionResult } from '../relationalIntrospectionResult';
import { DatabaseMetadata } from '../../../common/introspectionResult';
import IDatabaseClient from '../../IDatabaseClient';
export declare class MysqlConnector extends RelationalConnector {
    constructor(client: IDatabaseClient | Connection);
    getDatabaseType(): DatabaseType;
    protected createIntrospectionResult(models: ITable[], relations: ITableRelation[], enums: IEnum[], sequences: ISequenceInfo[]): RelationalIntrospectionResult;
    protected getTypeColumnName(): string;
    protected getAutoIncrementCondition(): string;
    protected parameter(count: number, type: string): string;
    protected hasReferentialConstraintsTableName(): boolean;
    protected queryColumnComments(schemaName: string): Promise<{
        text: string;
        columnName: string;
        tableName: string;
    }[]>;
    protected queryIndices(schemaName: string): Promise<{
        tableName: string;
        name: string;
        fields: string[];
        unique: boolean;
        isPrimaryKey: boolean;
    }[]>;
    private parseJoinedArray;
    protected queryEnums(schemaName: string): Promise<IInternalEnumInfo[]>;
    /**
     * We have extra join conditions in mysql.
     * @param schemaName
     */
    protected listRelations(schemaName: string): Promise<ITableRelation[]>;
    protected listSequences(schemaName: string): Promise<ISequenceInfo[]>;
    getMetadata(schemaName: string): Promise<DatabaseMetadata>;
}
