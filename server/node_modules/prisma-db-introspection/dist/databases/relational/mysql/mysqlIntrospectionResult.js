"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var relationalIntrospectionResult_1 = require("../relationalIntrospectionResult");
var prisma_datamodel_1 = require("prisma-datamodel");
var MysqlIntrospectionResult = /** @class */ (function (_super) {
    __extends(MysqlIntrospectionResult, _super);
    function MysqlIntrospectionResult(model, relations, enums, sequences, renderer) {
        return _super.call(this, model, relations, enums, sequences, prisma_datamodel_1.DatabaseType.mysql, renderer) || this;
    }
    MysqlIntrospectionResult.prototype.isTypeReserved = function (type) {
        return type.name === '_RelayId' || type.name === '_Migration';
    };
    MysqlIntrospectionResult.prototype.toTypeIdentifyer = function (fieldTypeName, fieldInfo, typeName) {
        var precisionStart = fieldTypeName.indexOf('(');
        var precisionEnd = fieldTypeName.lastIndexOf(')');
        var type = fieldTypeName;
        var precision = '';
        if (precisionEnd !== -1 && precisionEnd !== -1) {
            type = fieldTypeName.substring(0, precisionStart);
            precision = fieldTypeName.substring(precisionStart + 1, precisionEnd);
        }
        switch (type) {
            case 'int':
            case 'bigint':
            case 'smallint':
                return prisma_datamodel_1.TypeIdentifiers.integer;
            case 'decimal':
            case 'float':
            case 'double':
                return prisma_datamodel_1.TypeIdentifiers.float;
            case 'varchar':
            case 'char':
            case 'longtext':
            case 'mediumtext':
            case 'blob':
            case 'text':
            case 'mediumblob':
            // If we have a text type on an ID field, we map to the ID type.
            case 'smallblob':
                return fieldInfo.isId ? prisma_datamodel_1.TypeIdentifiers.id : prisma_datamodel_1.TypeIdentifiers.string;
            case 'bool':
            case 'tinyint':
            case 'bit':
                return prisma_datamodel_1.TypeIdentifiers.boolean;
            case 'json':
                return prisma_datamodel_1.TypeIdentifiers.json;
            case 'date':
            case 'time':
            case 'datetime':
            case 'timestamp':
                return prisma_datamodel_1.TypeIdentifiers.dateTime;
            case 'uuid':
                return prisma_datamodel_1.TypeIdentifiers.uuid;
            // Special case: For enum types we auto-generate some unique name.
            case 'enum':
                return prisma_datamodel_1.capitalize(typeName) + prisma_datamodel_1.capitalize(fieldInfo.name) + 'Enum';
            default:
                return null;
        }
    };
    MysqlIntrospectionResult.prototype.parseDefaultValue = function (defaultValueString, type) {
        return defaultValueString;
    };
    MysqlIntrospectionResult.prototype.resolveSequences = function (types, sequences) {
        return types; // Mysql cannot do that.
    };
    return MysqlIntrospectionResult;
}(relationalIntrospectionResult_1.RelationalIntrospectionResult));
exports.MysqlIntrospectionResult = MysqlIntrospectionResult;
//# sourceMappingURL=mysqlIntrospectionResult.js.map