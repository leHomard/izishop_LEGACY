"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var mongoConnector_1 = require("../../../databases/document/mongo/mongoConnector");
var mongoTestEnvironment_1 = require("../../../test-helpers/mongoTestEnvironment");
var prisma_datamodel_1 = require("prisma-datamodel");
var env = new mongoTestEnvironment_1.MongoTestEnvironment();
describe('Mongo Model Introspector', function () {
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, env.connect()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); });
    afterAll(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, env.disconnect()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); });
    afterEach(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, env.clear()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); });
    it('Should infer a model and basic scalar and array types correctly.', function () { return __awaiter(_this, void 0, void 0, function () {
        var connector, introspection, sdl, types, movieType;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, env.createCollection('Movie', [
                        {
                            name: 'Titanic',
                            genre: 'Science Fiction',
                            year: 1991,
                            rating: 9.5,
                            hasLeonardo: true,
                            roles: ['Rose', 'Jake'],
                        },
                    ])];
                case 1:
                    _a.sent();
                    connector = new mongoConnector_1.MongoConnector(env.getClient());
                    return [4 /*yield*/, connector.introspect(env.schemaName)];
                case 2:
                    introspection = _a.sent();
                    return [4 /*yield*/, introspection.getDatamodel()];
                case 3:
                    sdl = _a.sent();
                    types = sdl.types;
                    expect(types).toHaveLength(1);
                    movieType = prisma_datamodel_1.SdlExpect.type(types, 'Movie');
                    expect(movieType.fields).toHaveLength(7);
                    prisma_datamodel_1.SdlExpect.field(movieType, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.id, true);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'name', false, false, prisma_datamodel_1.TypeIdentifiers.string);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'genre', false, false, prisma_datamodel_1.TypeIdentifiers.string);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'year', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'rating', false, false, prisma_datamodel_1.TypeIdentifiers.float);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'hasLeonardo', false, false, prisma_datamodel_1.TypeIdentifiers.boolean);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'roles', false, true, prisma_datamodel_1.TypeIdentifiers.string);
                    return [2 /*return*/];
            }
        });
    }); }, 60000);
    it('Should infer embedded types correctly.', function () { return __awaiter(_this, void 0, void 0, function () {
        var connector, introspection, sdl, types, movieType;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, env.createCollection('Movie', [
                        {
                            name: 'Titanic',
                            genre: 'Science Fiction',
                            year: 1991,
                            rating: 9.5,
                            hasLeonardo: true,
                            roles: ['Rose', 'Jake'],
                        },
                        {
                            name: 'Titanic 2',
                            genre: 'Science Fiction',
                            year: 2031,
                            rating: 9.5,
                            hasLeonardo: true,
                            roles: null,
                        },
                    ])];
                case 1:
                    _a.sent();
                    connector = new mongoConnector_1.MongoConnector(env.getClient());
                    return [4 /*yield*/, connector.introspect(env.schemaName)];
                case 2:
                    introspection = _a.sent();
                    return [4 /*yield*/, introspection.getDatamodel()];
                case 3:
                    sdl = _a.sent();
                    types = sdl.types;
                    expect(types).toHaveLength(1);
                    movieType = prisma_datamodel_1.SdlExpect.type(types, 'Movie');
                    expect(movieType.fields).toHaveLength(7);
                    prisma_datamodel_1.SdlExpect.field(movieType, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.id, true);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'name', false, false, prisma_datamodel_1.TypeIdentifiers.string);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'genre', false, false, prisma_datamodel_1.TypeIdentifiers.string);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'year', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'rating', false, false, prisma_datamodel_1.TypeIdentifiers.float);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'hasLeonardo', false, false, prisma_datamodel_1.TypeIdentifiers.boolean);
                    prisma_datamodel_1.SdlExpect.field(movieType, 'roles', false, true, prisma_datamodel_1.TypeIdentifiers.string);
                    return [2 /*return*/];
            }
        });
    }); }, 60000);
});
//# sourceMappingURL=models.js.map