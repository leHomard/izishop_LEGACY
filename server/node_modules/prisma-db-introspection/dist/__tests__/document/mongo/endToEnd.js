"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var mongoConnector_1 = require("../../../databases/document/mongo/mongoConnector");
var mongoTestEnvironment_1 = require("../../../test-helpers/mongoTestEnvironment");
var webshop_1 = require("../data/webshop");
var env = new mongoTestEnvironment_1.MongoTestEnvironment();
describe('Mongo Model Introspector, end to end', function () {
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, env.connect()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); });
    afterAll(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, env.disconnect()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); });
    afterEach(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, env.clear()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); });
    it('Webshop', function () { return __awaiter(_this, void 0, void 0, function () {
        var connector, introspection, schema, normalizedSchema;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, env.createCollections(webshop_1.collections)];
                case 1:
                    _a.sent();
                    connector = new mongoConnector_1.MongoConnector(env.getClient());
                    return [4 /*yield*/, connector.introspect(env.schemaName)];
                case 2:
                    introspection = _a.sent();
                    return [4 /*yield*/, introspection.renderToDatamodelString()];
                case 3:
                    schema = _a.sent();
                    expect(schema).toMatchInlineSnapshot("\n\"type items {\n  # Type String is currently not supported for id fields.\n  _id: String! @id\n  keywords: [String] @scalarList(strategy: RELATION)\n  price: Float\n  rating: Float\n  reviews: [itemsReviews]\n}\n\ntype itemsReviews @embedded {\n  rating: Float\n  text: String\n}\n\ntype orders {\n  # Type Int is currently not supported for id fields.\n  _id: Int! @id\n  amount: Float\n  customer: users @relation(link: INLINE)\n  items: [items] @relation(link: INLINE)\n  orderDate: String\n}\n\ntype users {\n  # Type String is currently not supported for id fields.\n  _id: String! @id\n  firstName: String\n  lastName: String\n  paymentInfo: [usersPaymentInfo]\n  shippingAddress: usersShippingAddress\n}\n\ntype usersPaymentInfo @embedded {\n  accountId: String\n  BIC: String\n  expires: String\n  IBAN: String\n  number: String\n  type: String\n}\n\ntype usersShippingAddress @embedded {\n  country: String\n  number: String\n  street: String\n}\"\n");
                    return [4 /*yield*/, introspection.renderToNormalizedDatamodelString()];
                case 4:
                    normalizedSchema = _a.sent();
                    expect(normalizedSchema).toMatchInlineSnapshot("\n\"type Item @db(name: \\\"items\\\") {\n  # Type String is currently not supported for id fields.\n  _id: String! @id\n  keywords: [String] @scalarList(strategy: RELATION)\n  price: Float\n  rating: Float\n  reviews: [ItemReview]\n}\n\ntype ItemReview @embedded {\n  rating: Float\n  text: String\n}\n\ntype Order @db(name: \\\"orders\\\") {\n  # Type Int is currently not supported for id fields.\n  _id: Int! @id\n  amount: Float\n  customer: User @relation(link: INLINE)\n  items: [Item] @relation(link: INLINE)\n  orderDate: String\n}\n\ntype User @db(name: \\\"users\\\") {\n  # Type String is currently not supported for id fields.\n  _id: String! @id\n  firstName: String\n  lastName: String\n  paymentInfo: [UserPaymentInfo]\n  shippingAddress: UserShippingAddress\n}\n\ntype UserPaymentInfo @embedded {\n  accountId: String\n  bic: String @db(name: \\\"BIC\\\")\n  expires: String\n  iban: String @db(name: \\\"IBAN\\\")\n  number: String\n  type: String\n}\n\ntype UserShippingAddress @embedded {\n  country: String\n  number: String\n  street: String\n}\"\n");
                    return [2 /*return*/];
            }
        });
    }); }, 60000);
});
//# sourceMappingURL=endToEnd.js.map