"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var modelSampler_1 = require("../../../databases/document/modelSampler");
var mockDataSource_1 = require("../../../test-helpers/mockDataSource");
/**
 * Checks if model sampling and inferring module resolves fields an embedded types correctly.
 */
describe('Basic document model inferring', function () {
    it('Should create the sdl description for a simple model correctly.', function () {
        var document = {
            _id: 0,
            street: 'Test-Street',
            houseNumber: 3,
            rating: 5.7,
        };
        var merger = new modelSampler_1.ModelMerger('document', false, new mockDataSource_1.MockDocumentDataSource({}));
        merger.analyze(document);
        var _a = merger.getType(), type = _a.type, embedded = _a.embedded;
        expect(embedded).toHaveLength(0);
        expect(type.name).toBe('document');
        expect(type.isEmbedded).toBe(false);
        expect(type.isEnum).toBe(false);
        expect(type.directives).toHaveLength(0);
        expect(type.comments).toHaveLength(0);
        expect(type.fields).toHaveLength(4);
        prisma_datamodel_1.SdlExpect.field(type, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.integer, true);
        prisma_datamodel_1.SdlExpect.field(type, 'street', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(type, 'houseNumber', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
        prisma_datamodel_1.SdlExpect.field(type, 'rating', false, false, prisma_datamodel_1.TypeIdentifiers.float);
    });
    it('Should create types for arrays correctly', function () {
        var arrays = {
            _id: 'this-is-so-unique',
            floatArray: [0, 1.2, 5],
            stringArray: ['hello'],
            mixedArray: [0, 'hello', false],
            nestedArray: [[0, 1], [2, 3]],
        };
        var merger = new modelSampler_1.ModelMerger('arrays', false, new mockDataSource_1.MockDocumentDataSource({}));
        merger.analyze(arrays);
        var type = merger.getType().type;
        expect(type.name).toBe('arrays');
        prisma_datamodel_1.SdlExpect.field(type, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.string, true);
        prisma_datamodel_1.SdlExpect.field(type, 'stringArray', false, true, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(type, 'floatArray', false, true, prisma_datamodel_1.TypeIdentifiers.float);
        var mixedField = prisma_datamodel_1.SdlExpect.field(type, 'mixedArray', false, true, modelSampler_1.ModelSampler.ErrorType);
        prisma_datamodel_1.SdlExpect.error(mixedField);
        var nestedField = prisma_datamodel_1.SdlExpect.field(type, 'nestedArray', false, true, modelSampler_1.ModelSampler.ErrorType);
        prisma_datamodel_1.SdlExpect.error(nestedField);
    });
    it('Should create embedded types correctly', function () {
        var customer = {
            _id: 1,
            customer: 'Hugo',
            shippingAddress: {
                street: 'Test-Street',
                number: 3,
            },
        };
        var merger = new modelSampler_1.ModelMerger('Customer', false, new mockDataSource_1.MockDocumentDataSource({}));
        merger.analyze(customer);
        var _a = merger.getType(), type = _a.type, embedded = _a.embedded;
        expect(embedded).toHaveLength(1);
        var embeddedType = prisma_datamodel_1.SdlExpect.type(embedded, 'CustomerShippingAddress', false, true);
        expect(type.name).toBe('Customer');
        expect(type.isEmbedded).toBe(false);
        expect(type.fields).toHaveLength(3);
        prisma_datamodel_1.SdlExpect.field(type, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.integer, true);
        prisma_datamodel_1.SdlExpect.field(type, 'customer', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(type, 'shippingAddress', false, false, embeddedType);
        expect(embeddedType.fields).toHaveLength(2);
        prisma_datamodel_1.SdlExpect.field(embeddedType, 'street', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(embeddedType, 'number', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
    });
    it('Should create embedded array types correctly', function () {
        var customer = {
            _id: 1,
            customer: 'Hugo',
            orders: [
                {
                    item: 'Laptop',
                    count: 3,
                },
                {
                    item: 'Wok',
                    count: 1,
                },
            ],
        };
        var merger = new modelSampler_1.ModelMerger('Customer', false, new mockDataSource_1.MockDocumentDataSource({}));
        merger.analyze(customer);
        var _a = merger.getType(), type = _a.type, embedded = _a.embedded;
        expect(embedded).toHaveLength(1);
        var embeddedType = prisma_datamodel_1.SdlExpect.type(embedded, 'CustomerOrders', false, true);
        expect(type.name).toBe('Customer');
        expect(type.isEmbedded).toBe(false);
        expect(type.fields).toHaveLength(3);
        prisma_datamodel_1.SdlExpect.field(type, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.integer, true);
        prisma_datamodel_1.SdlExpect.field(type, 'customer', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(type, 'orders', false, true, embeddedType);
        expect(embeddedType.fields).toHaveLength(2);
        prisma_datamodel_1.SdlExpect.field(embeddedType, 'item', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(embeddedType, 'count', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
    });
});
//# sourceMappingURL=basic.js.map