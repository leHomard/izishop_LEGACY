"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var modelSampler_1 = require("../../../databases/document/modelSampler");
var mockDataSource_1 = require("../../../test-helpers/mockDataSource");
/**
 * Checks if model sampling and inferring module resolves conflicts in field definitions correctly.
 */
describe('Document model inferring, conflict resolution', function () {
    it('Should merge conflicting models additively.', function () {
        var user1 = {
            lastName: 'Test-1',
        };
        var user2 = {
            firstName: 'Test-2',
        };
        var merger = new modelSampler_1.ModelMerger('User', false, new mockDataSource_1.MockDocumentDataSource({}));
        merger.analyze(user1);
        merger.analyze(user2);
        var type = merger.getType().type;
        expect(type.fields).toHaveLength(2);
        prisma_datamodel_1.SdlExpect.field(type, 'lastName', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(type, 'firstName', false, false, prisma_datamodel_1.TypeIdentifiers.string);
    });
    it('Should merge conflicting models additively and recursively.', function () {
        var user1 = {
            lastName: 'Test-1',
            shippingAddress: {
                country: 'Germany',
            },
        };
        var user2 = {
            lastName: 'Test-3',
            firstName: 'Test-2',
            shippingAddress: {
                country: 'Germany',
                street: 'Teststreet',
            },
        };
        var user3 = {
            firstName: 'Test-2',
            shippingAddress: {
                street: 'Teststreet',
                houseNumber: 4,
            },
        };
        var merger = new modelSampler_1.ModelMerger('User', false, new mockDataSource_1.MockDocumentDataSource({}));
        merger.analyze(user1);
        merger.analyze(user2);
        merger.analyze(user3);
        var _a = merger.getType(), type = _a.type, embedded = _a.embedded;
        var embeddedType = prisma_datamodel_1.SdlExpect.type(embedded, 'UserShippingAddress', false, true);
        expect(type.fields).toHaveLength(3);
        prisma_datamodel_1.SdlExpect.field(embeddedType, 'country', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(embeddedType, 'street', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(embeddedType, 'houseNumber', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
        prisma_datamodel_1.SdlExpect.field(type, 'lastName', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(type, 'firstName', false, false, prisma_datamodel_1.TypeIdentifiers.string);
        prisma_datamodel_1.SdlExpect.field(type, 'shippingAddress', false, false, embeddedType);
    });
    it('Should bail on type conflict.', function () {
        var user1 = {
            lastName: 'Test-1',
            shippingAddress: {
                country: 'Germany',
            },
        };
        var user2 = {
            lastName: [false],
            firstName: 'Test-2',
            shippingAddress: {
                country: 'Germany',
                street: 8,
            },
        };
        var user3 = {
            firstName: 'Test-2',
            shippingAddress: {
                street: 'Teststreet',
                houseNumber: 4,
            },
        };
        var merger = new modelSampler_1.ModelMerger('User', false, new mockDataSource_1.MockDocumentDataSource({}));
        merger.analyze(user1);
        merger.analyze(user2);
        merger.analyze(user3);
        var _a = merger.getType(), type = _a.type, embedded = _a.embedded;
        var embeddedType = prisma_datamodel_1.SdlExpect.type(embedded, 'UserShippingAddress', false, true);
        expect(type.fields).toHaveLength(3);
        var conflictingEmbeddedField = prisma_datamodel_1.SdlExpect.field(embeddedType, 'street', false, false, modelSampler_1.ModelSampler.ErrorType);
        prisma_datamodel_1.SdlExpect.error(conflictingEmbeddedField);
        var conflictingField = prisma_datamodel_1.SdlExpect.field(type, 'lastName', false, false, modelSampler_1.ModelSampler.ErrorType);
        prisma_datamodel_1.SdlExpect.error(conflictingField);
    });
});
//# sourceMappingURL=conflicts.js.map