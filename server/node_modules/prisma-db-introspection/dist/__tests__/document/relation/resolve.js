"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var modelSampler_1 = require("../../../databases/document/modelSampler");
var relationResolver_1 = require("../../../databases/document/relationResolver");
var simpleRelational_1 = require("../data/simpleRelational");
var mockDataSource_1 = require("../../../test-helpers/mockDataSource");
/**
 * Checks if model sampling and inferring marks potential relation field correctly.
 *
 * Depends on the correctness of all model tests. On multiple errors, fix model tests first.
 */
describe('Document relation inferring, should connect correctly', function () {
    it('Should associate relation fields correctly.', function () { return __awaiter(_this, void 0, void 0, function () {
        var mockDataSource, userMerger, userResult, itemMerger, itemResult, allTypes, resolver;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockDataSource = new mockDataSource_1.MockDocumentDataSource({
                        User: simpleRelational_1.users,
                        Item: simpleRelational_1.items,
                    });
                    userMerger = new modelSampler_1.ModelMerger('User', false, mockDataSource);
                    simpleRelational_1.users.forEach(function (x) { return userMerger.analyze(x); });
                    userResult = userMerger.getType();
                    itemMerger = new modelSampler_1.ModelMerger('Item', false, mockDataSource);
                    simpleRelational_1.items.forEach(function (x) { return itemMerger.analyze(x); });
                    itemResult = itemMerger.getType();
                    allTypes = __spread([
                        userResult.type
                    ], userResult.embedded, [
                        itemResult.type
                    ], itemResult.embedded);
                    resolver = new relationResolver_1.RelationResolver();
                    return [4 /*yield*/, resolver.resolve(allTypes, mockDataSource, 'default')];
                case 1:
                    _a.sent();
                    simpleRelational_1.assertUserItemModel(allTypes);
                    return [2 /*return*/];
            }
        });
    }); });
    it('Should associate relation fields correctly, end to end', function () { return __awaiter(_this, void 0, void 0, function () {
        var mockDataSource, result, sdl, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    mockDataSource = new mockDataSource_1.MockDocumentDataSource({
                        User: simpleRelational_1.users,
                        Item: simpleRelational_1.items,
                    });
                    return [4 /*yield*/, mockDataSource.introspect('default')];
                case 1:
                    result = _b.sent();
                    return [4 /*yield*/, result.getDatamodel()];
                case 2:
                    sdl = _b.sent();
                    simpleRelational_1.assertUserItemModel(sdl.types);
                    _a = expect;
                    return [4 /*yield*/, result.renderToDatamodelString()];
                case 3:
                    _a.apply(void 0, [_b.sent()]).toEqual(simpleRelational_1.schemaString);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=resolve.js.map