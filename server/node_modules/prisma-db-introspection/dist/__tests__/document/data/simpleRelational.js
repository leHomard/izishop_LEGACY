"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
/*
 * users and items are a small datamodel to test relations.
 */
exports.users = [
    {
        _id: 'user1@prisma.com',
        firstName: 'Charlotte',
        orders: [
            {
                count: 5,
                item: 'Fridge',
            },
            {
                count: 1,
                item: 'Espresso',
            },
        ],
    },
    {
        _id: 'user2@prisma.com',
        firstName: 'Dolores',
        orders: [],
    },
    {
        _id: 'user3@prisma.com',
        firstName: 'Humbert',
        orders: [
            {
                count: 2,
                item: 'Laptop',
            },
        ],
    },
];
exports.items = [
    {
        _id: 'Fridge',
        cost: 200,
    },
    {
        _id: 'Laptop',
        cost: 2500,
    },
    {
        _id: 'Espresso',
        cost: 1,
    },
];
exports.schemaString = "type Item {\n  # Type String is currently not supported for id fields.\n  _id: String! @id\n  cost: Int\n}\n\ntype User {\n  # Type String is currently not supported for id fields.\n  _id: String! @id\n  firstName: String\n  orders: [UserOrders]\n}\n\ntype UserOrders @embedded {\n  count: Int\n  item: Item @relation(link: INLINE)\n}";
function assertUserItemModel(allTypes) {
    var userType = prisma_datamodel_1.SdlExpect.type(allTypes, 'User', false, false);
    var ordersType = prisma_datamodel_1.SdlExpect.type(allTypes, 'UserOrders', false, true);
    var itemType = prisma_datamodel_1.SdlExpect.type(allTypes, 'Item', false, false);
    expect(userType.fields).toHaveLength(3);
    prisma_datamodel_1.SdlExpect.field(userType, 'orders', false, true, ordersType);
    prisma_datamodel_1.SdlExpect.field(userType, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.string, true);
    prisma_datamodel_1.SdlExpect.field(userType, 'firstName', false, false, prisma_datamodel_1.TypeIdentifiers.string);
    expect(ordersType.fields).toHaveLength(2);
    prisma_datamodel_1.SdlExpect.field(ordersType, 'item', false, false, itemType);
    prisma_datamodel_1.SdlExpect.field(ordersType, 'count', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
    expect(itemType.fields).toHaveLength(2);
    prisma_datamodel_1.SdlExpect.field(itemType, '_id', true, false, prisma_datamodel_1.TypeIdentifiers.string, true);
    prisma_datamodel_1.SdlExpect.field(itemType, 'cost', false, false, prisma_datamodel_1.TypeIdentifiers.integer);
}
exports.assertUserItemModel = assertUserItemModel;
// Start: 13:38
//# sourceMappingURL=simpleRelational.js.map