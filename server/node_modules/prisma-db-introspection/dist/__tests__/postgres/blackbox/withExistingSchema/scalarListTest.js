"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var connectors_1 = require("../../../../connectors");
var pg_1 = require("pg");
var connectionDetails_1 = require("../connectionDetails");
var prisma_datamodel_1 = require("prisma-datamodel");
var existingSchema = "\ntype User {\n    id: ID! @unique\n    name355: String! @db(name: \"name300\")\n    car: Car\n    houses: [House!]!\n}\n  \ntype Car {\n    id: ID! @unique\n}\n  \ntype House {\n    id: ID! @unique\n} \n";
function introspect(client) {
    return __awaiter(this, void 0, void 0, function () {
        var existing;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    existing = prisma_datamodel_1.DefaultParser.create(prisma_datamodel_1.DatabaseType.postgres).parseFromSchemaString(existingSchema);
                    return [4 /*yield*/, connectors_1.default.create(prisma_datamodel_1.DatabaseType.postgres, client).introspect('service$stage')];
                case 1: return [2 /*return*/, (_a.sent()).renderToNormalizedDatamodelString(existing)];
            }
        });
    });
}
function testSchema(sql) {
    return __awaiter(this, void 0, void 0, function () {
        var client, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    client = new pg_1.Client(connectionDetails_1.connectionDetails);
                    return [4 /*yield*/, client.connect()];
                case 1:
                    _b.sent();
                    return [4 /*yield*/, client.query('DROP SCHEMA IF EXISTS "service$stage" cascade;')];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, client.query(sql)];
                case 3:
                    _b.sent();
                    _a = expect;
                    return [4 /*yield*/, introspect(client)];
                case 4:
                    _a.apply(void 0, [_b.sent()]).toMatchSnapshot();
                    return [4 /*yield*/, client.end()];
                case 5:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
describe('Introspector', function () {
    test('Type with scalar lists and existing schema', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, testSchema("--\n    -- PostgreSQL database dump\n    --\n    \n    -- Dumped from database version 10.1\n    -- Dumped by pg_dump version 10.5\n    \n    SET statement_timeout = 0;\n    SET lock_timeout = 0;\n    SET idle_in_transaction_session_timeout = 0;\n    SET client_encoding = 'UTF8';\n    SET standard_conforming_strings = on;\n    SELECT pg_catalog.set_config('search_path', '', false);\n    SET check_function_bodies = false;\n    SET client_min_messages = warning;\n    SET row_security = off;\n    \n    --\n    -- Name: service$stage; Type: SCHEMA; Schema: -; Owner: -\n    --\n    \n    CREATE SCHEMA \"service$stage\";\n    \n    \n    SET default_tablespace = '';\n    \n    SET default_with_oids = false;\n    \n    --\n    -- Name: Car; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"Car\" (\n        id character varying(25) NOT NULL,\n        name text NOT NULL,\n        \"updatedAt\" timestamp(3) without time zone NOT NULL,\n        \"createdAt\" timestamp(3) without time zone NOT NULL\n    );\n    \n    \n    --\n    -- Name: House; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"House\" (\n        id character varying(25) NOT NULL,\n        windows integer NOT NULL,\n        \"updatedAt\" timestamp(3) without time zone NOT NULL,\n        \"createdAt\" timestamp(3) without time zone NOT NULL\n    );\n    \n    \n    --\n    -- Name: User; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"User\" (\n        id character varying(25) NOT NULL,\n        name355 text NOT NULL,\n        \"updatedAt\" timestamp(3) without time zone NOT NULL,\n        \"createdAt\" timestamp(3) without time zone NOT NULL\n    );\n    \n    \n    --\n    -- Name: User_scalarIntList; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"User_scalarIntList\" (\n        \"nodeId\" character varying(25) NOT NULL,\n        \"position\" integer NOT NULL,\n        value integer NOT NULL\n    );\n    \n    \n    --\n    -- Name: User_scalarStringList; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"User_scalarStringList\" (\n        \"nodeId\" character varying(25) NOT NULL,\n        \"position\" integer NOT NULL,\n        value text NOT NULL\n    );\n    \n    \n    --\n    -- Name: _CarToUser; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"_CarToUser\" (\n        id character(25) NOT NULL,\n        \"A\" character varying(25) NOT NULL,\n        \"B\" character varying(25) NOT NULL\n    );\n    \n    \n    --\n    -- Name: _HouseToUser; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"_HouseToUser\" (\n        id character(25) NOT NULL,\n        \"A\" character varying(25) NOT NULL,\n        \"B\" character varying(25) NOT NULL\n    );\n    \n    \n    --\n    -- Name: _RelayId; Type: TABLE; Schema: service$stage; Owner: -\n    --\n    \n    CREATE TABLE \"service$stage\".\"_RelayId\" (\n        id character varying(36) NOT NULL,\n        \"stableModelIdentifier\" character varying(25) NOT NULL\n    );\n    \n    \n    --\n    -- Name: Car Car_pkey; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"Car\"\n        ADD CONSTRAINT \"Car_pkey\" PRIMARY KEY (id);\n    \n    \n    --\n    -- Name: House House_pkey; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"House\"\n        ADD CONSTRAINT \"House_pkey\" PRIMARY KEY (id);\n    \n    \n    --\n    -- Name: User User_pkey; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"User\"\n        ADD CONSTRAINT \"User_pkey\" PRIMARY KEY (id);\n    \n    \n    --\n    -- Name: User_scalarIntList User_scalarIntList_pkey; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"User_scalarIntList\"\n        ADD CONSTRAINT \"User_scalarIntList_pkey\" PRIMARY KEY (\"nodeId\", \"position\");\n    \n    \n    --\n    -- Name: User_scalarStringList User_scalarStringList_pkey; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"User_scalarStringList\"\n        ADD CONSTRAINT \"User_scalarStringList_pkey\" PRIMARY KEY (\"nodeId\", \"position\");\n    \n    \n    --\n    -- Name: _CarToUser _CarToUser_pkey; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"_CarToUser\"\n        ADD CONSTRAINT \"_CarToUser_pkey\" PRIMARY KEY (id);\n    \n    \n    --\n    -- Name: _HouseToUser _HouseToUser_pkey; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"_HouseToUser\"\n        ADD CONSTRAINT \"_HouseToUser_pkey\" PRIMARY KEY (id);\n    \n    \n    --\n    -- Name: _RelayId pk_RelayId; Type: CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"_RelayId\"\n        ADD CONSTRAINT \"pk_RelayId\" PRIMARY KEY (id);\n    \n    \n    --\n    -- Name: _CarToUser_AB_unique; Type: INDEX; Schema: service$stage; Owner: -\n    --\n    \n    CREATE UNIQUE INDEX \"_CarToUser_AB_unique\" ON \"service$stage\".\"_CarToUser\" USING btree (\"A\", \"B\");\n    \n    \n    --\n    -- Name: _CarToUser_B; Type: INDEX; Schema: service$stage; Owner: -\n    --\n    \n    CREATE INDEX \"_CarToUser_B\" ON \"service$stage\".\"_CarToUser\" USING btree (\"B\");\n    \n    \n    --\n    -- Name: _HouseToUser_AB_unique; Type: INDEX; Schema: service$stage; Owner: -\n    --\n    \n    CREATE UNIQUE INDEX \"_HouseToUser_AB_unique\" ON \"service$stage\".\"_HouseToUser\" USING btree (\"A\", \"B\");\n    \n    \n    --\n    -- Name: _HouseToUser_B; Type: INDEX; Schema: service$stage; Owner: -\n    --\n    \n    CREATE INDEX \"_HouseToUser_B\" ON \"service$stage\".\"_HouseToUser\" USING btree (\"B\");\n    \n    \n    --\n    -- Name: User_scalarIntList User_scalarIntList_nodeId_fkey; Type: FK CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"User_scalarIntList\"\n        ADD CONSTRAINT \"User_scalarIntList_nodeId_fkey\" FOREIGN KEY (\"nodeId\") REFERENCES \"service$stage\".\"User\"(id);\n    \n    \n    --\n    -- Name: User_scalarStringList User_scalarStringList_nodeId_fkey; Type: FK CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"User_scalarStringList\"\n        ADD CONSTRAINT \"User_scalarStringList_nodeId_fkey\" FOREIGN KEY (\"nodeId\") REFERENCES \"service$stage\".\"User\"(id);\n    \n    \n    --\n    -- Name: _CarToUser _CarToUser_A_fkey; Type: FK CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"_CarToUser\"\n        ADD CONSTRAINT \"_CarToUser_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"service$stage\".\"Car\"(id) ON DELETE CASCADE;\n    \n    \n    --\n    -- Name: _CarToUser _CarToUser_B_fkey; Type: FK CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"_CarToUser\"\n        ADD CONSTRAINT \"_CarToUser_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"service$stage\".\"User\"(id) ON DELETE CASCADE;\n    \n    \n    --\n    -- Name: _HouseToUser _HouseToUser_A_fkey; Type: FK CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"_HouseToUser\"\n        ADD CONSTRAINT \"_HouseToUser_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"service$stage\".\"House\"(id) ON DELETE CASCADE;\n    \n    \n    --\n    -- Name: _HouseToUser _HouseToUser_B_fkey; Type: FK CONSTRAINT; Schema: service$stage; Owner: -\n    --\n    \n    ALTER TABLE ONLY \"service$stage\".\"_HouseToUser\"\n        ADD CONSTRAINT \"_HouseToUser_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"service$stage\".\"User\"(id) ON DELETE CASCADE;\n    \n    \n    --\n    -- PostgreSQL database dump complete\n    --\n    ")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=scalarListTest.js.map