"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
describe('Introspector', function () {
    test('issue4095 relations', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, common_1.default("-- -------------------------------------------------------------\n    -- TablePlus 1.5(190)\n    --\n    -- https://tableplus.com/\n    --\n    -- Database: issue4019\n    -- Generation Time: 2019-02-08 19:22:20.9670\n    -- -------------------------------------------------------------\n    \n    \n    DROP TABLE IF EXISTS \"billing\".\"BillingAccount\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"BillingAccount_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"BillingAccount\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"BillingAccount_id_seq\"'::regclass),\n        \"name\" varchar(50) NOT NULL,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"customerId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Condition\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Condition_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Condition\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Condition_id_seq\"'::regclass),\n        \"startDate\" timestamptz NOT NULL,\n        \"endDate\" timestamptz NOT NULL,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"productId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Contract\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Contract_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Contract\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Contract_id_seq\"'::regclass),\n        \"code\" varchar(50) NOT NULL,\n        \"enabled\" bool DEFAULT false,\n        \"activationDateTime\" timestamptz,\n        \"minimumFee\" numeric NOT NULL,\n        \"lookToBook\" numeric NOT NULL,\n        \"customerId\" int8 NOT NULL,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Cost\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Cost_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Cost\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Cost_id_seq\"'::regclass),\n        \"type\" varchar(50) NOT NULL,\n        \"min\" int4,\n        \"max\" int4,\n        \"amount\" numeric,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"contractId\" int8,\n        \"itemId\" int8,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Customer\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Customer_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Customer\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Customer_id_seq\"'::regclass),\n        \"code\" varchar(50) NOT NULL,\n        \"name\" varchar(100) NOT NULL,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"GlobalCondition\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"GlobalCondition_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"GlobalCondition\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"GlobalCondition_id_seq\"'::regclass),\n        \"type\" varchar(50) NOT NULL,\n        \"numConnections\" int4,\n        \"millionSearches\" int4,\n        \"amount\" numeric,\n        \"globalStartFreeTrialPeriod\" timestamptz,\n        \"globalEndFreeTrialPeriod\" timestamptz,\n        \"defaultFreeTrialDaysForItem\" int4,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"contractId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Invoice\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Invoice_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Invoice\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Invoice_id_seq\"'::regclass),\n        \"startDate\" timestamptz NOT NULL,\n        \"endDate\" timestamptz NOT NULL,\n        \"paymentMethod\" varchar(100) NOT NULL,\n        \"paymentStatus\" varchar(100) NOT NULL,\n        \"amount\" numeric NOT NULL,\n        \"amountPaid\" numeric NOT NULL,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"billingAccountId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"InvoiceBreakdown\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"InvoiceBreakdown_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"InvoiceBreakdown\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"InvoiceBreakdown_id_seq\"'::regclass),\n        \"startDate\" timestamptz NOT NULL,\n        \"endDate\" timestamptz NOT NULL,\n        \"amount\" numeric NOT NULL,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"itemBillingAccountId\" int8 NOT NULL,\n        \"invoiceId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Item\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Item_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Item\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Item_id_seq\"'::regclass),\n        \"enabled\" bool DEFAULT false,\n        \"specificFreeTrialDays\" int4,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"contractId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Item_BillingAccount\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Item_BillingAccount_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Item_BillingAccount\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Item_BillingAccount_id_seq\"'::regclass),\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"billingAccountId\" int8 NOT NULL,\n        \"itemId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    DROP TABLE IF EXISTS \"billing\".\"Product\";\n    -- This script only contains the table creation statements and does not fully represent the table in the database. It's still missing: indices, triggers. Do not use it as a backup.\n    \n    -- Sequence and defined type\n    CREATE SEQUENCE IF NOT EXISTS billing.\"Product_id_seq\";\n    \n    -- Table Definition\n    CREATE TABLE \"billing\".\"Product\" (\n        \"id\" int8 NOT NULL DEFAULT nextval('billing.\"Product_id_seq\"'::regclass),\n        \"type\" varchar(50) NOT NULL,\n        \"system\" varchar(200) NOT NULL,\n        \"createdAt\" timestamptz NOT NULL,\n        \"updatedAt\" timestamptz NOT NULL,\n        \"itemId\" int8 NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n    \n    ALTER TABLE \"billing\".\"BillingAccount\" ADD FOREIGN KEY (\"customerId\") REFERENCES \"billing\".\"Customer\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Condition\" ADD FOREIGN KEY (\"productId\") REFERENCES \"billing\".\"Product\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Contract\" ADD FOREIGN KEY (\"customerId\") REFERENCES \"billing\".\"Customer\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Cost\" ADD FOREIGN KEY (\"contractId\") REFERENCES \"billing\".\"Contract\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Cost\" ADD FOREIGN KEY (\"itemId\") REFERENCES \"billing\".\"Item\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"GlobalCondition\" ADD FOREIGN KEY (\"contractId\") REFERENCES \"billing\".\"Contract\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Invoice\" ADD FOREIGN KEY (\"billingAccountId\") REFERENCES \"billing\".\"BillingAccount\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"InvoiceBreakdown\" ADD FOREIGN KEY (\"invoiceId\") REFERENCES \"billing\".\"Invoice\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"InvoiceBreakdown\" ADD FOREIGN KEY (\"itemBillingAccountId\") REFERENCES \"billing\".\"Item_BillingAccount\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Item\" ADD FOREIGN KEY (\"contractId\") REFERENCES \"billing\".\"Contract\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Item_BillingAccount\" ADD FOREIGN KEY (\"billingAccountId\") REFERENCES \"billing\".\"BillingAccount\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Item_BillingAccount\" ADD FOREIGN KEY (\"itemId\") REFERENCES \"billing\".\"Item\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n    ALTER TABLE \"billing\".\"Product\" ADD FOREIGN KEY (\"itemId\") REFERENCES \"billing\".\"Item\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;", 'billing')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=issue-4095.js.map