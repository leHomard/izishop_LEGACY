"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
describe('Introspector', function () {
    // Schema from https://github.com/prismagraphql/prisma/issues/2504
    test('Issue - 4208', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, common_1.default(sql, 'management4208')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
var sql = "\n--\n-- PostgreSQL database dump\n--\n\n--\n-- Name: jwt_token; Type: TYPE; Schema: public; Owner: ryan\n--\n\nCREATE TYPE jwt_token AS (\n\tuser_id integer\n);\n\n--\n-- Name: questions; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE questions (\n    question_id integer NOT NULL,\n    content text NOT NULL,\n    time_entered timestamp with time zone DEFAULT now() NOT NULL,\n    status text NOT NULL,\n    time_addressed timestamp with time zone,\n    session_id integer NOT NULL,\n    asker_id integer NOT NULL,\n    answerer_id integer,\n    location text\n);\n\nCREATE TABLE tags (\n    tag_id integer NOT NULL,\n    name text NOT NULL,\n    course_id integer NOT NULL,\n    level integer NOT NULL,\n    activated boolean DEFAULT true NOT NULL\n);\n\n--\n-- Name: session_series; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE session_series (\n    session_series_id integer NOT NULL,\n    start_time timestamp with time zone NOT NULL,\n    end_time timestamp with time zone NOT NULL,\n    building text NOT NULL,\n    room text NOT NULL,\n    course_id integer NOT NULL,\n    title text\n);\n\nCREATE TABLE sessions (\n    session_id integer NOT NULL,\n    start_time timestamp with time zone NOT NULL,\n    end_time timestamp with time zone NOT NULL,\n    building text NOT NULL,\n    room text NOT NULL,\n    session_series_id integer,\n    course_id integer NOT NULL,\n    title text\n);\n\n--\n-- Name: users; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE users (\n    user_id integer NOT NULL,\n    email text NOT NULL,\n    google_id text NOT NULL,\n    first_name text,\n    last_name text,\n    created_at timestamp with time zone DEFAULT now(),\n    last_activity_at timestamp with time zone DEFAULT now(),\n    photo_url text,\n    display_name text\n);\n\n--\n-- Name: course_users; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE course_users (\n    course_id integer NOT NULL,\n    user_id integer NOT NULL,\n    role text NOT NULL\n);\n\n--\n-- Name: CloudSecret; Type: TABLE; Schema: management; Owner: ryan\n--\n\nCREATE TABLE \"CloudSecret\" (\n    secret character varying(255) NOT NULL\n);\n\n--\n-- Name: InternalMigration; Type: TABLE; Schema: management; Owner: ryan\n--\n\nCREATE TABLE \"InternalMigration\" (\n    id character varying(255) NOT NULL,\n    \"appliedAt\" timestamp without time zone NOT NULL\n);\n\n--\n-- Name: Migration; Type: TABLE; Schema: management; Owner: ryan\n--\n\nCREATE TABLE \"Migration\" (\n    \"projectId\" character varying(200) DEFAULT ''::character varying NOT NULL,\n    revision integer DEFAULT 1 NOT NULL,\n    schema text,\n    functions text,\n    status character varying(20) DEFAULT 'PENDING'::character varying NOT NULL,\n    applied integer DEFAULT 0 NOT NULL,\n    \"rolledBack\" integer DEFAULT 0 NOT NULL,\n    steps text,\n    errors text,\n    \"startedAt\" timestamp without time zone,\n    \"finishedAt\" timestamp without time zone,\n    datamodel text,\n    CONSTRAINT \"Migration_status_check\" CHECK (((status)::text = ANY ((ARRAY['PENDING'::character varying, 'IN_PROGRESS'::character varying, 'SUCCESS'::character varying, 'ROLLING_BACK'::character varying, 'ROLLBACK_SUCCESS'::character varying, 'ROLLBACK_FAILURE'::character varying])::text[])))\n);\n\n--\n-- Name: Project; Type: TABLE; Schema: management; Owner: ryan\n--\n\nCREATE TABLE \"Project\" (\n    id character varying(200) DEFAULT ''::character varying NOT NULL,\n    secrets text,\n    \"allowQueries\" boolean DEFAULT true NOT NULL,\n    \"allowMutations\" boolean DEFAULT true NOT NULL,\n    functions text\n);\n\n--\n-- Name: TelemetryInfo; Type: TABLE; Schema: management; Owner: ryan\n--\n\nCREATE TABLE \"TelemetryInfo\" (\n    id character varying(255) NOT NULL,\n    \"lastPinged\" timestamp without time zone\n);\n\n--\n-- Name: courses; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE courses (\n    course_id integer NOT NULL,\n    code text NOT NULL,\n    name text NOT NULL,\n    semester text NOT NULL,\n    start_date date NOT NULL,\n    end_date date NOT NULL,\n    queue_open_interval interval DEFAULT '00:30:00'::interval NOT NULL,\n    char_limit integer DEFAULT 100 NOT NULL\n);\n\n--\n-- Name: courses_course_id_seq; Type: SEQUENCE; Schema: public; Owner: ryan\n--\n\nCREATE SEQUENCE courses_course_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE courses_course_id_seq OWNED BY courses.course_id;\n\n--\n-- Name: question_tags; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE question_tags (\n    question_id integer NOT NULL,\n    tag_id integer NOT NULL\n);\n\n--\n-- Name: questions_question_id_seq; Type: SEQUENCE; Schema: public; Owner: ryan\n--\n\nCREATE SEQUENCE questions_question_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER SEQUENCE questions_question_id_seq OWNED BY questions.question_id;\n\n--\n-- Name: session_series_session_series_id_seq; Type: SEQUENCE; Schema: public; Owner: ryan\n--\n\nCREATE SEQUENCE session_series_session_series_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE session_series_session_series_id_seq OWNED BY session_series.session_series_id;\n\n\n--\n-- Name: session_series_tas; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE session_series_tas (\n    session_series_id integer NOT NULL,\n    user_id integer NOT NULL\n);\n\n\nCREATE TABLE session_tas (\n    session_id integer NOT NULL,\n    user_id integer NOT NULL\n);\n\n--\n-- Name: sessions_session_id_seq; Type: SEQUENCE; Schema: public; Owner: ryan\n--\n\nCREATE SEQUENCE sessions_session_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE sessions_session_id_seq OWNED BY sessions.session_id;\n\n\n--\n-- Name: tag_relations; Type: TABLE; Schema: public; Owner: ryan\n--\n\nCREATE TABLE tag_relations (\n    parent_id integer NOT NULL,\n    child_id integer NOT NULL\n);\n\n--\n-- Name: tags_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: ryan\n--\n\nCREATE SEQUENCE tags_tag_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n--\n-- Name: tags_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ryan\n--\n\nALTER SEQUENCE tags_tag_id_seq OWNED BY tags.tag_id;\n\n\n--\n-- Name: users_user_id_seq; Type: SEQUENCE; Schema: public; Owner: ryan\n--\n\nCREATE SEQUENCE users_user_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n--\n-- Name: users_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ryan\n--\n\nALTER SEQUENCE users_user_id_seq OWNED BY users.user_id;\n\n\n--\n-- Name: courses course_id; Type: DEFAULT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY courses ALTER COLUMN course_id SET DEFAULT nextval('courses_course_id_seq'::regclass);\n\n\n--\n-- Name: questions question_id; Type: DEFAULT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY questions ALTER COLUMN question_id SET DEFAULT nextval('questions_question_id_seq'::regclass);\n\n\n--\n-- Name: session_series session_series_id; Type: DEFAULT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_series ALTER COLUMN session_series_id SET DEFAULT nextval('session_series_session_series_id_seq'::regclass);\n\n\n--\n-- Name: sessions session_id; Type: DEFAULT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY sessions ALTER COLUMN session_id SET DEFAULT nextval('sessions_session_id_seq'::regclass);\n\n\n--\n-- Name: tags tag_id; Type: DEFAULT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY tags ALTER COLUMN tag_id SET DEFAULT nextval('tags_tag_id_seq'::regclass);\n\n\n--\n-- Name: users user_id; Type: DEFAULT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY users ALTER COLUMN user_id SET DEFAULT nextval('users_user_id_seq'::regclass);\n\n--\n-- Name: CloudSecret CloudSecret_pkey; Type: CONSTRAINT; Schema: management; Owner: ryan\n--\n\nALTER TABLE ONLY \"CloudSecret\"\n    ADD CONSTRAINT \"CloudSecret_pkey\" PRIMARY KEY (secret);\n\n\n--\n-- Name: InternalMigration InternalMigration_pkey; Type: CONSTRAINT; Schema: management; Owner: ryan\n--\n\nALTER TABLE ONLY \"InternalMigration\"\n    ADD CONSTRAINT \"InternalMigration_pkey\" PRIMARY KEY (id);\n\n\n--\n-- Name: Migration Migration_pkey; Type: CONSTRAINT; Schema: management; Owner: ryan\n--\n\nALTER TABLE ONLY \"Migration\"\n    ADD CONSTRAINT \"Migration_pkey\" PRIMARY KEY (\"projectId\", revision);\n\n\n--\n-- Name: Project Project_pkey; Type: CONSTRAINT; Schema: management; Owner: ryan\n--\n\nALTER TABLE ONLY \"Project\"\n    ADD CONSTRAINT \"Project_pkey\" PRIMARY KEY (id);\n\n\n--\n-- Name: TelemetryInfo TelemetryInfo_pkey; Type: CONSTRAINT; Schema: management; Owner: ryan\n--\n\nALTER TABLE ONLY \"TelemetryInfo\"\n    ADD CONSTRAINT \"TelemetryInfo_pkey\" PRIMARY KEY (id);\n\n--\n-- Name: course_users course_users_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY course_users\n    ADD CONSTRAINT course_users_pk PRIMARY KEY (course_id, user_id);\n\n\n--\n-- Name: courses courses_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY courses\n    ADD CONSTRAINT courses_pk PRIMARY KEY (course_id);\n\n\n--\n-- Name: question_tags question_tags_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY question_tags\n    ADD CONSTRAINT question_tags_pk PRIMARY KEY (question_id, tag_id);\n\n\n--\n-- Name: questions questions_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY questions\n    ADD CONSTRAINT questions_pk PRIMARY KEY (question_id);\n\n\n--\n-- Name: session_series session_series_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_series\n    ADD CONSTRAINT session_series_pk PRIMARY KEY (session_series_id);\n\n\n--\n-- Name: session_series_tas session_series_tas_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_series_tas\n    ADD CONSTRAINT session_series_tas_pk PRIMARY KEY (session_series_id, user_id);\n\n\n--\n-- Name: session_tas session_tas_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_tas\n    ADD CONSTRAINT session_tas_pk PRIMARY KEY (session_id, user_id);\n\n\n--\n-- Name: sessions sessions_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY sessions\n    ADD CONSTRAINT sessions_pk PRIMARY KEY (session_id);\n\n\n--\n-- Name: tag_relations tag_relations_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY tag_relations\n    ADD CONSTRAINT tag_relations_pk PRIMARY KEY (parent_id, child_id);\n\n\n--\n-- Name: tags tags_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY tags\n    ADD CONSTRAINT tags_pk PRIMARY KEY (tag_id);\n\n\n--\n-- Name: users users_email_key; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY users\n    ADD CONSTRAINT users_email_key UNIQUE (email);\n\n\n--\n-- Name: users users_googleid_key; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY users\n    ADD CONSTRAINT users_googleid_key UNIQUE (google_id);\n\n\n--\n-- Name: users users_pk; Type: CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY users\n    ADD CONSTRAINT users_pk PRIMARY KEY (user_id);\n\n--\n-- Name: Migration migrations_projectid_foreign; Type: FK CONSTRAINT; Schema: management; Owner: ryan\n--\n\nALTER TABLE ONLY \"Migration\"\n    ADD CONSTRAINT migrations_projectid_foreign FOREIGN KEY (\"projectId\") REFERENCES \"Project\"(id) ON UPDATE CASCADE ON DELETE CASCADE;\n\n--\n-- Name: course_users course_users_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY course_users\n    ADD CONSTRAINT course_users_fk0 FOREIGN KEY (course_id) REFERENCES courses(course_id);\n\n\n--\n-- Name: course_users course_users_fk1; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY course_users\n    ADD CONSTRAINT course_users_fk1 FOREIGN KEY (user_id) REFERENCES users(user_id);\n\n\n--\n-- Name: question_tags question_tags_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY question_tags\n    ADD CONSTRAINT question_tags_fk0 FOREIGN KEY (question_id) REFERENCES questions(question_id);\n\n\n--\n-- Name: question_tags question_tags_fk1; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY question_tags\n    ADD CONSTRAINT question_tags_fk1 FOREIGN KEY (tag_id) REFERENCES tags(tag_id);\n\n\n--\n-- Name: questions questions_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY questions\n    ADD CONSTRAINT questions_fk0 FOREIGN KEY (session_id) REFERENCES sessions(session_id);\n\n\n--\n-- Name: questions questions_fk1; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY questions\n    ADD CONSTRAINT questions_fk1 FOREIGN KEY (asker_id) REFERENCES users(user_id);\n\n\n--\n-- Name: questions questions_fk2; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY questions\n    ADD CONSTRAINT questions_fk2 FOREIGN KEY (answerer_id) REFERENCES users(user_id);\n\n\n--\n-- Name: session_series session_series_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_series\n    ADD CONSTRAINT session_series_fk0 FOREIGN KEY (course_id) REFERENCES courses(course_id);\n\n\n--\n-- Name: session_series_tas session_series_tas_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_series_tas\n    ADD CONSTRAINT session_series_tas_fk0 FOREIGN KEY (session_series_id) REFERENCES session_series(session_series_id);\n\n\n--\n-- Name: session_series_tas session_series_tas_fk1; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_series_tas\n    ADD CONSTRAINT session_series_tas_fk1 FOREIGN KEY (user_id) REFERENCES users(user_id);\n\n\n--\n-- Name: session_tas session_tas_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_tas\n    ADD CONSTRAINT session_tas_fk0 FOREIGN KEY (session_id) REFERENCES sessions(session_id);\n\n\n--\n-- Name: session_tas session_tas_fk1; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY session_tas\n    ADD CONSTRAINT session_tas_fk1 FOREIGN KEY (user_id) REFERENCES users(user_id);\n\n\n--\n-- Name: sessions sessions_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY sessions\n    ADD CONSTRAINT sessions_fk0 FOREIGN KEY (course_id) REFERENCES courses(course_id);\n\n\n--\n-- Name: sessions sessions_fk1; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY sessions\n    ADD CONSTRAINT sessions_fk1 FOREIGN KEY (session_series_id) REFERENCES session_series(session_series_id);\n\n\n--\n-- Name: tag_relations tag_relations_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY tag_relations\n    ADD CONSTRAINT tag_relations_fk0 FOREIGN KEY (parent_id) REFERENCES tags(tag_id);\n\n\n--\n-- Name: tag_relations tag_relations_fk1; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY tag_relations\n    ADD CONSTRAINT tag_relations_fk1 FOREIGN KEY (child_id) REFERENCES tags(tag_id);\n\n\n--\n-- Name: tags tags_fk0; Type: FK CONSTRAINT; Schema: public; Owner: ryan\n--\n\nALTER TABLE ONLY tags\n    ADD CONSTRAINT tags_fk0 FOREIGN KEY (course_id) REFERENCES courses(course_id);\n\n--\n-- PostgreSQL database dump complete\n--\n\n";
//# sourceMappingURL=issue-4208.js.map