"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var e_1, _a;
var path = require("path");
var fs = require("fs");
var prisma_datamodel_1 = require("prisma-datamodel");
var mysql = require("mysql");
var connectionDetails_1 = require("../connectionDetails");
var mysqlConnector_1 = require("../../../../databases/relational/mysql/mysqlConnector");
var mysqlDatabaseClient_1 = require("../../../../databases/relational/mysql/mysqlDatabaseClient");
// If you have trouble signing in to mysql 8, run
// ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'prisma';
// FLUSH PRIVILEGES;
// Tests are located in different module.
var relativeTestCaseDir = path.join(__dirname, '../../../../../../prisma-generate-schema/__tests__/blackbox/cases/');
function blackBoxTest(name) {
    return __awaiter(this, void 0, void 0, function () {
        var modelPath, sqlDumpPath, model, sqlDump, parser, refModel, dbClient, wrappedClient, connector, introspectionResult, metadata, unnormalized, normalizedWithoutReference, normalizedWithReference, legacyRenderer, legacyRenderedWithReference, renderer, renderedWithReference;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    modelPath = path.join(relativeTestCaseDir, name + "/model_relational_v1.1.graphql");
                    sqlDumpPath = path.join(relativeTestCaseDir, name + "/mysql.sql");
                    expect(fs.existsSync(modelPath));
                    expect(fs.existsSync(sqlDumpPath));
                    model = fs.readFileSync(modelPath, { encoding: 'UTF-8' });
                    sqlDump = fs.readFileSync(sqlDumpPath, { encoding: 'UTF-8' });
                    parser = prisma_datamodel_1.DefaultParser.create(prisma_datamodel_1.DatabaseType.postgres);
                    refModel = parser.parseFromSchemaString(model);
                    connectionDetails_1.connectionDetails.database = "";
                    connectionDetails_1.connectionDetails.multipleStatements = true;
                    dbClient = mysql.createConnection(connectionDetails_1.connectionDetails);
                    wrappedClient = new mysqlDatabaseClient_1.default(dbClient);
                    connector = new mysqlConnector_1.MysqlConnector(wrappedClient);
                    return [4 /*yield*/, dbClient.connect()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, wrappedClient.query("DROP DATABASE IF EXISTS `schema-generator@" + name + "`;", [])];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, wrappedClient.query("CREATE DATABASE `schema-generator@" + name + "`;", [])];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, wrappedClient.query("USE `schema-generator@" + name + "`;", [])];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, wrappedClient.query(sqlDump, [])];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, connector.introspect("schema-generator@" + name)];
                case 6:
                    introspectionResult = _a.sent();
                    return [4 /*yield*/, connector.getMetadata("schema-generator@" + name)
                        // Hard to test.
                        // console.log(metadata)
                    ];
                case 7:
                    metadata = _a.sent();
                    unnormalized = introspectionResult.getDatamodel();
                    normalizedWithoutReference = introspectionResult.getNormalizedDatamodel();
                    normalizedWithReference = introspectionResult.getNormalizedDatamodel(refModel);
                    legacyRenderer = prisma_datamodel_1.DefaultRenderer.create(prisma_datamodel_1.DatabaseType.postgres);
                    legacyRenderedWithReference = legacyRenderer.render(normalizedWithReference, true);
                    expect(legacyRenderedWithReference).toMatchSnapshot(name + " - legacy datamodel");
                    renderer = prisma_datamodel_1.DefaultRenderer.create(prisma_datamodel_1.DatabaseType.postgres, true);
                    renderedWithReference = renderer.render(normalizedWithReference, true);
                    expect(renderedWithReference).toMatchSnapshot(name + " - v1.1 datamodel");
                    return [4 /*yield*/, dbClient.end()];
                case 8:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = blackBoxTest;
/**
 * The CI Tests are flaky and fail on this, even it works locally
 * https://circleci.com/gh/prisma/prisma/4619
 * Need to debug
 */
var testNames = fs
    .readdirSync(relativeTestCaseDir)
    .filter(function (n) {
    return ![
        'selfReferencing',
        'relations',
        'relationNames',
        'meshRelation',
        'airbnb',
    ].includes(n);
});
var _loop_1 = function (testName) {
    test("Introspects " + testName + "/mysql correctly", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, blackBoxTest(testName)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); }, 20000);
};
try {
    for (var testNames_1 = __values(testNames), testNames_1_1 = testNames_1.next(); !testNames_1_1.done; testNames_1_1 = testNames_1.next()) {
        var testName = testNames_1_1.value;
        _loop_1(testName);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (testNames_1_1 && !testNames_1_1.done && (_a = testNames_1.return)) _a.call(testNames_1);
    }
    finally { if (e_1) throw e_1.error; }
}
//# sourceMappingURL=blackboxTest.js.map