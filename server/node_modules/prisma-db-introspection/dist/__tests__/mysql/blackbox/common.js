"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var connectionDetails_1 = require("./connectionDetails");
var mysql = require("mysql");
var connectors_1 = require("../../../connectors");
var prisma_datamodel_1 = require("prisma-datamodel");
var mysqlDatabaseClient_1 = require("../../../databases/relational/mysql/mysqlDatabaseClient");
function testSchema(schemaSql, schemaName, createSchema) {
    if (schemaName === void 0) { schemaName = 'DatabaseIntrospector'; }
    if (createSchema === void 0) { createSchema = true; }
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = checkSnapshot;
                    return [4 /*yield*/, createAndIntrospect(schemaSql, schemaName, createSchema)];
                case 1:
                    _a.apply(void 0, [_b.sent()]);
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = testSchema;
function createAndIntrospect(schemaSql, schemaName, createSchema) {
    if (schemaName === void 0) { schemaName = 'DatabaseIntrospector'; }
    if (createSchema === void 0) { createSchema = true; }
    return __awaiter(this, void 0, void 0, function () {
        var internalSchemaName, dbClient, client, connector, dml, metadata, renderer, rendered, legacyRenderer, legacyRendered;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    internalSchemaName = "schema-generator@" + schemaName;
                    dbClient = mysql.createConnection(connectionDetails_1.connectionDetails);
                    return [4 /*yield*/, dbClient.connect()];
                case 1:
                    _a.sent();
                    client = new mysqlDatabaseClient_1.default(dbClient);
                    return [4 /*yield*/, client.query("DROP DATABASE IF EXISTS `" + internalSchemaName + "`;", [])];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, client.query("CREATE DATABASE `" + internalSchemaName + "`;", [])];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, client.query("USE `" + internalSchemaName + "`;", [])];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, client.query(schemaSql, [])];
                case 5:
                    _a.sent();
                    connector = connectors_1.default.create(prisma_datamodel_1.DatabaseType.mysql, client);
                    return [4 /*yield*/, connector.introspect(internalSchemaName)];
                case 6:
                    dml = (_a.sent()).getNormalizedDatamodel();
                    return [4 /*yield*/, connector.getMetadata(internalSchemaName)
                        // Never matches, as size in bytes is always different.
                        // console.log(metadata)
                        // V2 rendering
                    ];
                case 7:
                    metadata = _a.sent();
                    renderer = prisma_datamodel_1.DefaultRenderer.create(prisma_datamodel_1.DatabaseType.postgres, true);
                    rendered = renderer.render(dml);
                    legacyRenderer = prisma_datamodel_1.DefaultRenderer.create(prisma_datamodel_1.DatabaseType.postgres, false);
                    legacyRendered = legacyRenderer.render(dml);
                    return [4 /*yield*/, dbClient.end()];
                case 8:
                    _a.sent();
                    return [2 /*return*/, { v1: legacyRendered, v2: rendered }];
            }
        });
    });
}
exports.createAndIntrospect = createAndIntrospect;
function checkSnapshot(res) {
    expect(res.v1).toMatchSnapshot();
    expect(res.v2).toMatchSnapshot();
}
exports.checkSnapshot = checkSnapshot;
//# sourceMappingURL=common.js.map