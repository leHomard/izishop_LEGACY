"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var modelNameAndDirectiveNormalizer_1 = require("../../common/normalization/modelNameAndDirectiveNormalizer");
function testNormalization(schemaFromDb, expectedResultSchema) {
    var parser = prisma_datamodel_1.DefaultParser.create(prisma_datamodel_1.DatabaseType.mongo);
    var fromDb = parser.parseFromSchemaString(schemaFromDb);
    var normalizer = new modelNameAndDirectiveNormalizer_1.default(null);
    normalizer.normalize(fromDb);
    var renderer = prisma_datamodel_1.DefaultRenderer.create(prisma_datamodel_1.DatabaseType.mongo);
    var resultSchema = renderer.render(fromDb, true);
    expect(resultSchema).toEqual(expectedResultSchema);
}
describe('Schema normalization from database schema', function () {
    it('Should normalize type names.', function () {
        var schemaFromDb = "type user {\n        age: Int!\n        name: String!\n        birthday: Date!\n        posts: [post]\n        signedUp: Date!\n      }\n\n      type post @embedded {\n        text: String!\n        likes: Int!\n      }";
        // The expected result schema
        var expectedResultSchema = prisma_datamodel_1.dedent("\n      type User @db(name: \"user\") {\n        age: Int!\n        birthday: Date!\n        name: String!\n        posts: [UserPost]\n        signedUp: Date!\n      }\n\n      type UserPost @embedded {\n        likes: Int!\n        text: String!\n      }");
        testNormalization(schemaFromDb, expectedResultSchema);
    });
    it('Should correctly name nested embedded types.', function () {
        var schemaFromDb = "  \n      type post @embedded {\n        text: String!\n        comments: [comment]\n      }\n      \n      type comment @embedded {\n        text: String!\n      }\n\n      type user {\n        name: String!\n        posts: [post]\n      }";
        var expectedResultSchema = prisma_datamodel_1.dedent("\n      type User @db(name: \"user\") {\n        name: String!\n        posts: [UserPost]\n      }\n\n      type UserPost @embedded {\n        comments: [UserPostComment]\n        text: String!\n      }\n      \n      type UserPostComment @embedded {\n        text: String!\n      }");
        testNormalization(schemaFromDb, expectedResultSchema);
    });
});
//# sourceMappingURL=nameNormalization.js.map