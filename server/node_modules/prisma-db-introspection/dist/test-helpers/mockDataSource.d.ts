import { DocumentConnector } from '../databases/document/documentConnectorBase';
import { IDataIterator, ICollectionDescription } from '../databases/document/documentConnector';
import { Data } from '../databases/document/data';
import { DatabaseType } from 'prisma-datamodel';
import { DatabaseMetadata } from '../common/introspectionResult';
/**
 * This class mocks a document database in-memory.
 */
export declare class MockDocumentDataSource extends DocumentConnector<string> {
    private collections;
    constructor(colletions: {
        [name: string]: Data[];
    });
    exists(collection: string, id: any): Promise<boolean>;
    getDatabaseType(): DatabaseType;
    listSchemas(): Promise<string[]>;
    getInternalCollections(schema: string): Promise<ICollectionDescription<string>[]>;
    getInternalCollection(schema: string, collection: string): Promise<string>;
    protected sampleOne(collection: string): Promise<IDataIterator>;
    protected sampleMany(collection: string, limit: number): Promise<IDataIterator>;
    protected sampleAll(collection: string): Promise<IDataIterator>;
    getMetadata(): Promise<DatabaseMetadata>;
}
export declare class InMemoryIterator implements IDataIterator {
    private items;
    constructor(items: Data[]);
    hasNext(): Promise<boolean>;
    next(): Promise<Data>;
    close(): Promise<void>;
}
